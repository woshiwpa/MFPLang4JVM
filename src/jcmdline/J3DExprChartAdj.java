/*
 * MFP project, J3DExprChartAdj.java : Designed and developed by Tony Cui in 2021
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * J3DExprChartAdj.java
 *
 * Created on 20/09/2013, 11:18:38 PM
 */
package jcmdline;

import com.cyzapps.PlotAdapter.OGLExprChart;
import com.cyzapps.PlotAdapter.OGLExprChartOperator;
import java.awt.Color;
import java.io.Serializable;

/**
 *
 * @author tonyc
 */
public class J3DExprChartAdj extends javax.swing.JDialog {

    public static class AdjOGLExprChartParams implements Serializable {

        public double mdXFrom = -5;
        public double mdXTo = 5;
        public int mnXNumOfSteps = OGLExprChartOperator.DEFAULT_NUM_OF_STEPS;
        public double mdYFrom = -5;
        public double mdYTo = 5;
        public int mnYNumOfSteps = OGLExprChartOperator.DEFAULT_NUM_OF_STEPS;
        public double mdZFrom = -5;
        public double mdZTo = 5;
        public int mnZNumOfSteps = OGLExprChartOperator.DEFAULT_NUM_OF_STEPS;
        public boolean mbNotShowAxis;
        public boolean mbNotShowTitle;

        public boolean isNoAdj(AdjOGLExprChartParams adjOriginal) {
            return (mdXFrom == adjOriginal.mdXFrom) && (mdXTo == adjOriginal.mdXTo) && (mnXNumOfSteps == adjOriginal.mnXNumOfSteps)
                    && (mdYFrom == adjOriginal.mdYFrom) && (mdYTo == adjOriginal.mdYTo) && (mnYNumOfSteps == adjOriginal.mnYNumOfSteps)
                    && (mdZFrom == adjOriginal.mdZFrom) && (mdZTo == adjOriginal.mdZTo) && (mnZNumOfSteps == adjOriginal.mnZNumOfSteps)
                    && (mbNotShowAxis == adjOriginal.mbNotShowAxis) && (mbNotShowTitle == adjOriginal.mbNotShowTitle);
        }

        public boolean isNoAdj(double dOriginalXFrom, double dOriginalXTo, int nOriginalXNumOfSteps,
                double dOriginalYFrom, double dOriginalYTo, int nOriginalYNumOfSteps,
                double dOriginalZFrom, double dOriginalZTo, int nOriginalZNumOfSteps,
                boolean bNotShowAxis, boolean bNotShowTitle) {
            return (mdXFrom == dOriginalXFrom) && (mdXTo == dOriginalXTo) && (mnXNumOfSteps == nOriginalXNumOfSteps)
                    && (mdYFrom == dOriginalYFrom) && (mdYTo == dOriginalYTo) && (mnYNumOfSteps == nOriginalYNumOfSteps)
                    && (mdZFrom == dOriginalZFrom) && (mdZTo == dOriginalZTo) && (mnZNumOfSteps == nOriginalZNumOfSteps)
                    && (mbNotShowAxis == bNotShowAxis) && (mbNotShowTitle == bNotShowTitle);
        }

    }

    public OGLExprChart moglChart = new OGLExprChart();

    /**
     * Creates new form J3DExprChartAdj
     */
    public J3DExprChartAdj(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle(JCmdLineApp.getStringsClass().get_3DExpr_config());
    }

    public J3DExprChartAdj(java.awt.Frame parent, boolean modal, OGLExprChart oglChart) {
        super(parent, modal);
        initComponents();
        if (oglChart != null) {
            moglChart = oglChart;
        }
        setTitle(JCmdLineApp.getStringsClass().get_3DExpr_config() + " : " + moglChart.mstrChartTitle);
        lblXFrom.setText(moglChart.mstrXAxisName + " " + lblXFrom.getText());
        lblYFrom.setText(moglChart.mstrYAxisName + " " + lblYFrom.getText());
        lblZFrom.setText(moglChart.mstrZAxisName + " " + lblZFrom.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblXFrom = new javax.swing.JLabel();
        txtXFrom = new javax.swing.JTextField();
        lblXTo = new javax.swing.JLabel();
        txtXTo = new javax.swing.JTextField();
        lblXNumOfSteps = new javax.swing.JLabel();
        txtXNumOfSteps = new javax.swing.JTextField();
        lblYNumOfSteps = new javax.swing.JLabel();
        txtYNumOfSteps = new javax.swing.JTextField();
        lblYFrom = new javax.swing.JLabel();
        txtYFrom = new javax.swing.JTextField();
        lblYTo = new javax.swing.JLabel();
        txtYTo = new javax.swing.JTextField();
        lblZNumOfSteps = new javax.swing.JLabel();
        txtZNumOfSteps = new javax.swing.JTextField();
        lblZFrom = new javax.swing.JLabel();
        txtZFrom = new javax.swing.JTextField();
        lblZTo = new javax.swing.JLabel();
        txtZTo = new javax.swing.JTextField();
        btnClose = new javax.swing.JButton();
        chkBoxNotShowAxis = new javax.swing.JCheckBox();
        chkBoxNotShowTitle = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        lblXFrom.setText(JCmdLineApp.getStringsClass().get_variable_from());
        lblXFrom.setName("lblXFrom"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jcmdline.JCmdLineApp.class).getContext().getResourceMap(J3DExprChartAdj.class);
        txtXFrom.setText(resourceMap.getString("txtXFrom.text")); // NOI18N
        txtXFrom.setName("txtXFrom"); // NOI18N
        txtXFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXFromFocusLost(evt);
            }
        });

        lblXTo.setText(JCmdLineApp.getStringsClass().get_variable_to());
        lblXTo.setName("lblXTo"); // NOI18N

        txtXTo.setText(resourceMap.getString("txtXTo.text")); // NOI18N
        txtXTo.setName("txtXTo"); // NOI18N
        txtXTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXToFocusLost(evt);
            }
        });

        lblXNumOfSteps.setText(JCmdLineApp.getStringsClass().get_variable_number_of_steps());
        lblXNumOfSteps.setName("lblXNumOfSteps"); // NOI18N

        txtXNumOfSteps.setText(resourceMap.getString("txtXNumOfSteps.text")); // NOI18N
        txtXNumOfSteps.setName("txtXNumOfSteps"); // NOI18N
        txtXNumOfSteps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXNumOfStepsFocusLost(evt);
            }
        });

        lblYNumOfSteps.setText(JCmdLineApp.getStringsClass().get_variable_number_of_steps());
        lblYNumOfSteps.setName("lblYNumOfSteps"); // NOI18N

        txtYNumOfSteps.setName("txtYNumOfSteps"); // NOI18N
        txtYNumOfSteps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYNumOfStepsFocusLost(evt);
            }
        });

        lblYFrom.setText(JCmdLineApp.getStringsClass().get_variable_from());
        lblYFrom.setName("lblYFrom"); // NOI18N

        txtYFrom.setName("txtYFrom"); // NOI18N
        txtYFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYFromFocusLost(evt);
            }
        });

        lblYTo.setText(JCmdLineApp.getStringsClass().get_variable_to());
        lblYTo.setName("lblYTo"); // NOI18N

        txtYTo.setName("txtYTo"); // NOI18N
        txtYTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYToFocusLost(evt);
            }
        });

        lblZNumOfSteps.setText(JCmdLineApp.getStringsClass().get_variable_number_of_steps());
        lblZNumOfSteps.setName("lblZNumOfSteps"); // NOI18N

        txtZNumOfSteps.setName("txtZNumOfSteps"); // NOI18N
        txtZNumOfSteps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZNumOfStepsFocusLost(evt);
            }
        });

        lblZFrom.setText(JCmdLineApp.getStringsClass().get_variable_from());
        lblZFrom.setName("lblZFrom"); // NOI18N

        txtZFrom.setName("txtZFrom"); // NOI18N
        txtZFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZFromFocusLost(evt);
            }
        });

        lblZTo.setText(JCmdLineApp.getStringsClass().get_variable_to());
        lblZTo.setName("lblZTo"); // NOI18N

        txtZTo.setName("txtZTo"); // NOI18N
        txtZTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZToFocusLost(evt);
            }
        });

        btnClose.setText(JCmdLineApp.getStringsClass().get_apply());
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        chkBoxNotShowAxis.setText(JCmdLineApp.getStringsClass().get_not_show_axis());
        chkBoxNotShowAxis.setName("chkBoxNotShowAxis"); // NOI18N
        chkBoxNotShowAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxNotShowAxisActionPerformed(evt);
            }
        });

        chkBoxNotShowTitle.setText(JCmdLineApp.getStringsClass().get_not_show_title());
        chkBoxNotShowTitle.setName("chkBoxNotShowTitle"); // NOI18N
        chkBoxNotShowTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxNotShowTitleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(356, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkBoxNotShowAxis)
                        .addGap(18, 18, 18)
                        .addComponent(chkBoxNotShowTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblXFrom)
                        .addGap(18, 18, 18)
                        .addComponent(txtXFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblXTo)
                        .addGap(18, 18, 18)
                        .addComponent(txtXTo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblXNumOfSteps)
                        .addGap(18, 18, 18)
                        .addComponent(txtXNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblYFrom)
                        .addGap(18, 18, 18)
                        .addComponent(txtYFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblYTo)
                        .addGap(18, 18, 18)
                        .addComponent(txtYTo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblYNumOfSteps)
                        .addGap(18, 18, 18)
                        .addComponent(txtYNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblZFrom)
                        .addGap(18, 18, 18)
                        .addComponent(txtZFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZTo)
                        .addGap(18, 18, 18)
                        .addComponent(txtZTo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZNumOfSteps)
                        .addGap(18, 18, 18)
                        .addComponent(txtZNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblXFrom)
                    .addComponent(txtXFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblXTo)
                    .addComponent(txtXTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblXNumOfSteps)
                    .addComponent(txtXNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYFrom)
                    .addComponent(txtYFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYTo)
                    .addComponent(txtYTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYNumOfSteps)
                    .addComponent(txtYNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZFrom)
                    .addComponent(txtZFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZTo)
                    .addComponent(txtZTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZNumOfSteps)
                    .addComponent(txtZNumOfSteps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxNotShowAxis)
                    .addComponent(chkBoxNotShowTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtXFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXFromFocusLost
            Double dInput = validateToFromTextInput(txtXFrom, txtXTo, XFROM_INITIAL_VALUE, XTO_INITIAL_VALUE, true);
            if (dInput != null) {
                mdXFrom = dInput;
                try {
                    mdXTo = Double.parseDouble(txtXTo.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidXFrom = true;
                mbValidXTo = true;
            } else {
                mbValidXFrom = false;
                mbValidXTo = false;
            }
    }//GEN-LAST:event_txtXFromFocusLost

    private void txtXToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXToFocusLost
            Double dInput = validateToFromTextInput(txtXFrom, txtXTo, XFROM_INITIAL_VALUE, XTO_INITIAL_VALUE, false);
            if (dInput != null) {
                mdXTo = dInput;
                try {
                    mdXFrom = Double.parseDouble(txtXFrom.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidXTo = true;
                mbValidXFrom = true;
            } else {
                mbValidXTo = false;
                mbValidXFrom = false;
            }
    }//GEN-LAST:event_txtXToFocusLost

    private void txtXNumOfStepsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXNumOfStepsFocusLost
            Integer nInput = validateInclusiveIntRange(txtXNumOfSteps, XNUMOFSTEPS_INITIAL_VALUE, MIN_NUM_OF_STEPS, MAX_NUM_OF_STEPS);
            if (nInput != null) {
                mnXNumOfSteps = nInput;
                mbValidXNumOfSteps = true;
            } else {
                mbValidXNumOfSteps = false;
            }
    }//GEN-LAST:event_txtXNumOfStepsFocusLost

    private void txtYFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYFromFocusLost
            Double dInput = validateToFromTextInput(txtYFrom, txtYTo, YFROM_INITIAL_VALUE, YTO_INITIAL_VALUE, true);
            if (dInput != null) {
                mdYFrom = dInput;
                try {
                    mdYTo = Double.parseDouble(txtYTo.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidYFrom = true;
                mbValidYTo = true;
            } else {
                mbValidYFrom = false;
                mbValidYTo = false;
            }
    }//GEN-LAST:event_txtYFromFocusLost

    private void txtYToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYToFocusLost
            Double dInput = validateToFromTextInput(txtYFrom, txtYTo, YFROM_INITIAL_VALUE, YTO_INITIAL_VALUE, false);
            if (dInput != null) {
                mdYTo = dInput;
                try {
                    mdYFrom = Double.parseDouble(txtYFrom.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidYTo = true;
                mbValidYFrom = true;
            } else {
                mbValidYTo = false;
                mbValidYFrom = false;
            }
    }//GEN-LAST:event_txtYToFocusLost

    private void txtYNumOfStepsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYNumOfStepsFocusLost
            Integer nInput = validateInclusiveIntRange(txtYNumOfSteps, YNUMOFSTEPS_INITIAL_VALUE, MIN_NUM_OF_STEPS, MAX_NUM_OF_STEPS);
            if (nInput != null) {
                mnYNumOfSteps = nInput;
                mbValidYNumOfSteps = true;
            } else {
                mbValidYNumOfSteps = false;
            }
    }//GEN-LAST:event_txtYNumOfStepsFocusLost

    private void txtZFromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZFromFocusLost
            Double dInput = validateToFromTextInput(txtZFrom, txtZTo, ZFROM_INITIAL_VALUE, ZTO_INITIAL_VALUE, true);
            if (dInput != null) {
                mdZFrom = dInput;
                try {
                    mdZTo = Double.parseDouble(txtZTo.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidZFrom = true;
                mbValidZTo = true;
            } else {
                mbValidZFrom = false;
                mbValidZTo = false;
            }
    }//GEN-LAST:event_txtZFromFocusLost

    private void txtZToFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZToFocusLost
            Double dInput = validateToFromTextInput(txtZFrom, txtZTo, ZFROM_INITIAL_VALUE, ZTO_INITIAL_VALUE, false);
            if (dInput != null) {
                mdZTo = dInput;
                try {
                    mdZFrom = Double.parseDouble(txtZFrom.getText().toString());
                } catch (NumberFormatException e) {
                    // this will not happen coz the text has been validated in function validateToFromTextInput
                }
                mbValidZTo = true;
                mbValidZFrom = true;
            } else {
                mbValidZTo = false;
                mbValidZFrom = false;
            }
    }//GEN-LAST:event_txtZToFocusLost

    private void txtZNumOfStepsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZNumOfStepsFocusLost
            Integer nInput = validateInclusiveIntRange(txtZNumOfSteps, ZNUMOFSTEPS_INITIAL_VALUE, MIN_NUM_OF_STEPS, MAX_NUM_OF_STEPS);
            if (nInput != null) {
                mnZNumOfSteps = nInput;
                mbValidZNumOfSteps = true;
            } else {
                mbValidZNumOfSteps = false;
            }
    }//GEN-LAST:event_txtZNumOfStepsFocusLost

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
            moglChart.applyCfgChart(getAdjParams());
    }//GEN-LAST:event_btnCloseActionPerformed

    private void chkBoxNotShowAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxNotShowAxisActionPerformed
        if (chkBoxNotShowAxis.isSelected()) {
            mbNotShowAxis = true;
        } else {
            mbNotShowAxis = false;
        }
    }//GEN-LAST:event_chkBoxNotShowAxisActionPerformed

    private void chkBoxNotShowTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxNotShowTitleActionPerformed
        if (chkBoxNotShowTitle.isSelected()) {
            mbNotShowTitle = true;
        } else {
            mbNotShowTitle = false;
        }
    }//GEN-LAST:event_chkBoxNotShowTitleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(J3DExprChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(J3DExprChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(J3DExprChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(J3DExprChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                J3DExprChartAdj dialog = new J3DExprChartAdj(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JCheckBox chkBoxNotShowAxis;
    private javax.swing.JCheckBox chkBoxNotShowTitle;
    private javax.swing.JLabel lblXFrom;
    private javax.swing.JLabel lblXNumOfSteps;
    private javax.swing.JLabel lblXTo;
    private javax.swing.JLabel lblYFrom;
    private javax.swing.JLabel lblYNumOfSteps;
    private javax.swing.JLabel lblYTo;
    private javax.swing.JLabel lblZFrom;
    private javax.swing.JLabel lblZNumOfSteps;
    private javax.swing.JLabel lblZTo;
    private javax.swing.JTextField txtXFrom;
    private javax.swing.JTextField txtXNumOfSteps;
    private javax.swing.JTextField txtXTo;
    private javax.swing.JTextField txtYFrom;
    private javax.swing.JTextField txtYNumOfSteps;
    private javax.swing.JTextField txtYTo;
    private javax.swing.JTextField txtZFrom;
    private javax.swing.JTextField txtZNumOfSteps;
    private javax.swing.JTextField txtZTo;
    // End of variables declaration//GEN-END:variables

    public static final Color NORMAL_BKGRND_COLOR = Color.WHITE;
    public static final Color ERROR_BKGRND_COLOR = Color.YELLOW;

    public static final int MAX_NUM_OF_STEPS = OGLExprChartOperator.DEFAULT_NUM_OF_STEPS * 5;
    public static final int MIN_NUM_OF_STEPS = OGLExprChartOperator.DEFAULT_NUM_OF_STEPS / 5;

    public static final double XFROM_INITIAL_VALUE = -5.0;
    public static final double XTO_INITIAL_VALUE = 5.0;
    public static final int XNUMOFSTEPS_INITIAL_VALUE = 10;
    public static final double YFROM_INITIAL_VALUE = -5.0;
    public static final double YTO_INITIAL_VALUE = 5.0;
    public static final int YNUMOFSTEPS_INITIAL_VALUE = 10;
    public static final double ZFROM_INITIAL_VALUE = -5.0;
    public static final double ZTO_INITIAL_VALUE = 5.0;
    public static final int ZNUMOFSTEPS_INITIAL_VALUE = 10;
    public static final boolean NOTSHOWAXIS_INITIAL_VALUE = false;
    public static final boolean NOTSHOWTITLE_INITIAL_VALUE = false;

    private double mdXFrom = XFROM_INITIAL_VALUE;
    private double mdXTo = XTO_INITIAL_VALUE;
    private int mnXNumOfSteps = XNUMOFSTEPS_INITIAL_VALUE;
    private double mdYFrom = YFROM_INITIAL_VALUE;
    private double mdYTo = YTO_INITIAL_VALUE;
    private int mnYNumOfSteps = YNUMOFSTEPS_INITIAL_VALUE;
    private double mdZFrom = ZFROM_INITIAL_VALUE;
    private double mdZTo = ZTO_INITIAL_VALUE;
    private int mnZNumOfSteps = ZNUMOFSTEPS_INITIAL_VALUE;
    private boolean mbNotShowAxis = NOTSHOWAXIS_INITIAL_VALUE;
    private boolean mbNotShowTitle = NOTSHOWTITLE_INITIAL_VALUE;

    private boolean mbValidXFrom = true;
    private boolean mbValidXTo = true;
    private boolean mbValidXNumOfSteps = true;
    private boolean mbValidYFrom = true;
    private boolean mbValidYTo = true;
    private boolean mbValidYNumOfSteps = true;
    private boolean mbValidZFrom = true;
    private boolean mbValidZTo = true;
    private boolean mbValidZNumOfSteps = true;

    public static Double validateToFromTextInput(javax.swing.JTextField txtFrom, javax.swing.JTextField txtTo, Double dDefaultFrom, Double dDefaultTo, boolean bReturnFrom) {
        String strFrom = txtFrom.getText().toString();
        String strTo = txtTo.getText().toString();
        double dValueFrom = dDefaultFrom, dValueTo = dDefaultTo;
        Boolean bInputRight = true;
        try {
            dValueFrom = Double.parseDouble(strFrom);
            dValueTo = Double.parseDouble(strTo);
        } catch (NumberFormatException e) {
            bInputRight = false;
        }
        if (bInputRight && dValueFrom >= dValueTo) {
            bInputRight = false;
        }
        if (!bInputRight) {
            txtFrom.setBackground(ERROR_BKGRND_COLOR);
            txtTo.setBackground(ERROR_BKGRND_COLOR);
        } else {
            txtFrom.setBackground(NORMAL_BKGRND_COLOR);
            txtTo.setBackground(NORMAL_BKGRND_COLOR);
        }
        if (bInputRight) {
            return bReturnFrom ? dValueFrom : dValueTo;
        } else {
            return null;
        }
    }

    public static Integer validateInclusiveIntRange(javax.swing.JTextField txtInput, Integer nDefault, Integer nMin, Integer nMax) {
        String strText = txtInput.getText().toString();
        int nValue = nDefault;
        Boolean bInputRight = true;
        try {
            nValue = Integer.parseInt(strText);
        } catch (NumberFormatException e) {
            bInputRight = false;
        }
        if (nMin != null && nValue < nMin) {
            bInputRight = false;
        } else if (nMax != null && nValue > nMax) {
            bInputRight = false;
        }
        if (!bInputRight) {
            txtInput.setBackground(ERROR_BKGRND_COLOR);
        } else {
            txtInput.setBackground(NORMAL_BKGRND_COLOR);
        }
        if (bInputRight) {
            return nValue;
        } else {
            return null;
        }
    }

    public void resetParams() {
        mdXFrom = XFROM_INITIAL_VALUE;
        mdXTo = XTO_INITIAL_VALUE;
        mnXNumOfSteps = XNUMOFSTEPS_INITIAL_VALUE;
        mdYFrom = YFROM_INITIAL_VALUE;
        mdYTo = YTO_INITIAL_VALUE;
        mnYNumOfSteps = YNUMOFSTEPS_INITIAL_VALUE;
        mdZFrom = ZFROM_INITIAL_VALUE;
        mdZTo = ZTO_INITIAL_VALUE;
        mnZNumOfSteps = ZNUMOFSTEPS_INITIAL_VALUE;
        mbNotShowAxis = NOTSHOWAXIS_INITIAL_VALUE;
        mbNotShowTitle = NOTSHOWTITLE_INITIAL_VALUE;

        txtXFrom.setText("" + mdXFrom);
        txtXTo.setText("" + mdXTo);
        txtXNumOfSteps.setText("" + mnXNumOfSteps);
        txtYFrom.setText("" + mdYFrom);
        txtYTo.setText("" + mdYTo);
        txtYNumOfSteps.setText("" + mnYNumOfSteps);
        txtZFrom.setText("" + mdZFrom);
        txtZTo.setText("" + mdZTo);
        txtZNumOfSteps.setText("" + mnZNumOfSteps);

        validateInput();
        chkBoxNotShowAxis.setSelected(mbNotShowAxis);
        chkBoxNotShowTitle.setSelected(mbNotShowTitle);
    }

    public void resetParams(AdjOGLExprChartParams adjOGLExprChartParams) {
        mdXFrom = adjOGLExprChartParams.mdXFrom;
        mdXTo = adjOGLExprChartParams.mdXTo;
        mnXNumOfSteps = adjOGLExprChartParams.mnXNumOfSteps;
        mdYFrom = adjOGLExprChartParams.mdYFrom;
        mdYTo = adjOGLExprChartParams.mdYTo;
        mnYNumOfSteps = adjOGLExprChartParams.mnYNumOfSteps;
        mdZFrom = adjOGLExprChartParams.mdZFrom;
        mdZTo = adjOGLExprChartParams.mdZTo;
        mnZNumOfSteps = adjOGLExprChartParams.mnZNumOfSteps;
        mbNotShowAxis = adjOGLExprChartParams.mbNotShowAxis;
        mbNotShowTitle = adjOGLExprChartParams.mbNotShowTitle;

        txtXFrom.setText("" + mdXFrom);
        txtXTo.setText("" + mdXTo);
        txtXNumOfSteps.setText("" + mnXNumOfSteps);
        txtYFrom.setText("" + mdYFrom);
        txtYTo.setText("" + mdYTo);
        txtYNumOfSteps.setText("" + mnYNumOfSteps);
        txtZFrom.setText("" + mdZFrom);
        txtZTo.setText("" + mdZTo);
        txtZNumOfSteps.setText("" + mnZNumOfSteps);

        validateInput();

        chkBoxNotShowAxis.setSelected(mbNotShowAxis);
        chkBoxNotShowTitle.setSelected(mbNotShowTitle);
    }

    public void validateInput() {
        txtXFromFocusLost(null);
        txtXToFocusLost(null);
        txtXNumOfStepsFocusLost(null);
        txtYFromFocusLost(null);
        txtYToFocusLost(null);
        txtYNumOfStepsFocusLost(null);
        txtZFromFocusLost(null);
        txtZToFocusLost(null);
        txtZNumOfStepsFocusLost(null);
    }

    public AdjOGLExprChartParams getAdjParams() {
        AdjOGLExprChartParams adjParams = new AdjOGLExprChartParams();
        adjParams.mdXFrom = mdXFrom;
        adjParams.mdXTo = mdXTo;
        adjParams.mnXNumOfSteps = mnXNumOfSteps;
        adjParams.mdYFrom = mdYFrom;
        adjParams.mdYTo = mdYTo;
        adjParams.mnYNumOfSteps = mnYNumOfSteps;
        adjParams.mdZFrom = mdZFrom;
        adjParams.mdZTo = mdZTo;
        adjParams.mnZNumOfSteps = mnZNumOfSteps;
        adjParams.mbNotShowAxis = mbNotShowAxis;
        adjParams.mbNotShowTitle = mbNotShowTitle;
        return adjParams;
    }
}
