/*
 * MFP project, JMultiXYZChartAdj.java : Designed and developed by Tony Cui in 2021
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JMultiXYZChartAdj.java
 *
 * Created on 07/08/2013, 2:19:36 PM
 */
package jcmdline;

import com.cyzapps.PlotAdapter.OGLChart;
import com.cyzapps.VisualMFP.Position3D;
import java.awt.Color;
import java.io.Serializable;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author tonyc
 */
public class JMultiXYZChartAdj extends javax.swing.JDialog {

    public OGLChart moglChart = new OGLChart();

    /**
     * Creates new form JMultiXYZChartAdj
     */
    public JMultiXYZChartAdj(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle(JCmdLineApp.getStringsClass().get_multiXYZ_config());
    }

    public JMultiXYZChartAdj(java.awt.Frame parent, boolean modal, OGLChart oglChart) {
        super(parent, modal);
        initComponents();
        if (oglChart != null) {
            moglChart = oglChart;
        }
        setTitle(JCmdLineApp.getStringsClass().get_multiXYZ_config() + " : " + moglChart.mstrChartTitle);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtXRotate = new javax.swing.JTextField();
        lblZRotate = new javax.swing.JLabel();
        txtZShift = new javax.swing.JTextField();
        txtZRotate = new javax.swing.JTextField();
        lblXRotate = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        txtYShift = new javax.swing.JTextField();
        lblZShift = new javax.swing.JLabel();
        txtXShift = new javax.swing.JTextField();
        lblYShift = new javax.swing.JLabel();
        lblXShift = new javax.swing.JLabel();
        txtYRotate = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        lblYRotate = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtZZoom = new javax.swing.JTextField();
        lblYZoom = new javax.swing.JLabel();
        txtXZoom = new javax.swing.JTextField();
        lblXZoom = new javax.swing.JLabel();
        lblZoom = new javax.swing.JLabel();
        lblZZoom = new javax.swing.JLabel();
        txtYZoom = new javax.swing.JTextField();
        txtChartZoom = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        chkBoxNotShowAxis = new javax.swing.JCheckBox();
        chkBoxNotShowTitle = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        txtXRotate.setBackground(NORMAL_BKGRND_COLOR);
        txtXRotate.setText("" + JMultiXYZChartAdj.XROTATE_INITIAL_VALUE);
        txtXRotate.setName("txtXRotate"); // NOI18N
        txtXRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXRotateFocusLost(evt);
            }
        });

        lblZRotate.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_z_rotate_prompt());
        lblZRotate.setName("lblZRotate"); // NOI18N

        txtZShift.setBackground(NORMAL_BKGRND_COLOR);
        txtZShift.setText("" + JMultiXYZChartAdj.ZSHIFT_INITIAL_VALUE);
        txtZShift.setName("txtZShift"); // NOI18N
        txtZShift.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZShiftFocusLost(evt);
            }
        });

        txtZRotate.setBackground(NORMAL_BKGRND_COLOR);
        txtZRotate.setText("" + JMultiXYZChartAdj.ZROTATE_INITIAL_VALUE);
        txtZRotate.setName("txtZRotate"); // NOI18N
        txtZRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZRotateFocusLost(evt);
            }
        });

        lblXRotate.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_x_rotate_prompt());
        lblXRotate.setName("lblXRotate"); // NOI18N

        btnClose.setText(JCmdLineApp.getStringsClass().get_apply());
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtYShift.setBackground(NORMAL_BKGRND_COLOR);
        txtYShift.setText("" + JMultiXYZChartAdj.YSHIFT_INITIAL_VALUE);
        txtYShift.setName("txtYShift"); // NOI18N
        txtYShift.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYShiftFocusLost(evt);
            }
        });

        lblZShift.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_z_shift_prompt());
        lblZShift.setName("lblZShift"); // NOI18N

        txtXShift.setBackground(NORMAL_BKGRND_COLOR);
        txtXShift.setText("" + JMultiXYZChartAdj.XSHIFT_INITIAL_VALUE);
        txtXShift.setName("txtXShift"); // NOI18N
        txtXShift.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXShiftFocusLost(evt);
            }
        });

        lblYShift.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_y_shift_prompt());
        lblYShift.setName("lblYShift"); // NOI18N

        lblXShift.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_x_shift_prompt());
        lblXShift.setName("lblXShift"); // NOI18N

        txtYRotate.setBackground(NORMAL_BKGRND_COLOR);
        txtYRotate.setText("" + JMultiXYZChartAdj.YROTATE_INITIAL_VALUE);
        txtYRotate.setName("txtYRotate"); // NOI18N
        txtYRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYRotateFocusLost(evt);
            }
        });

        jSeparator2.setName("jSeparator2"); // NOI18N

        lblYRotate.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_y_rotate_prompt());
        lblYRotate.setName("lblYRotate"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        txtZZoom.setBackground(NORMAL_BKGRND_COLOR);
        txtZZoom.setText("" + JMultiXYZChartAdj.ZSCALE_INITIAL_VALUE);
        txtZZoom.setName("txtZZoom"); // NOI18N
        txtZZoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtZZoomFocusLost(evt);
            }
        });

        lblYZoom.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_y_zoom_prompt() + " (" + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MIN) + " ~ " + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MAX) + ")");
        lblYZoom.setName("lblYZoom"); // NOI18N

        txtXZoom.setBackground(NORMAL_BKGRND_COLOR);
        txtXZoom.setText("" + JMultiXYZChartAdj.XSCALE_INITIAL_VALUE);
        txtXZoom.setName("txtXZoom"); // NOI18N
        txtXZoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtXZoomFocusLost(evt);
            }
        });

        lblXZoom.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_x_zoom_prompt() + " (" + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MIN) + " ~ " + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MAX) + ")");
        lblXZoom.setName("lblXZoom"); // NOI18N

        lblZoom.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_zoom_prompt() + " (" + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MIN) + " ~ " + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MAX) + ")");
        lblZoom.setName("lblZoom"); // NOI18N

        lblZZoom.setText(JCmdLineApp.getStringsClass().get_multiXYZ_settings_z_zoom_prompt() + " (" + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MIN) + " ~ " + Math.pow(10, JMultiXYZChartAdj.ZOOMING_MAX) + ")");
        lblZZoom.setName("lblZZoom"); // NOI18N

        txtYZoom.setBackground(NORMAL_BKGRND_COLOR);
        txtYZoom.setText("" + JMultiXYZChartAdj.YSCALE_INITIAL_VALUE);
        txtYZoom.setName("txtYZoom"); // NOI18N
        txtYZoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYZoomFocusLost(evt);
            }
        });

        txtChartZoom.setBackground(NORMAL_BKGRND_COLOR);
        txtChartZoom.setText("" + JMultiXYZChartAdj.CHARTSCALE_INITIAL_VALUE);
        txtChartZoom.setName("txtChartZoom"); // NOI18N
        txtChartZoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChartZoomFocusLost(evt);
            }
        });

        jSeparator3.setName("jSeparator3"); // NOI18N

        chkBoxNotShowAxis.setText(JCmdLineApp.getStringsClass().get_not_show_axis());
        chkBoxNotShowAxis.setName("chkBoxNotShowAxis"); // NOI18N
        chkBoxNotShowAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxNotShowAxisActionPerformed(evt);
            }
        });

        chkBoxNotShowTitle.setText(JCmdLineApp.getStringsClass().get_not_show_title());
        chkBoxNotShowTitle.setName("chkBoxNotShowTitle"); // NOI18N
        chkBoxNotShowTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxNotShowTitleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkBoxNotShowAxis)
                        .addGap(18, 18, 18)
                        .addComponent(chkBoxNotShowTitle))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblXShift)
                        .addGap(18, 18, 18)
                        .addComponent(txtXShift, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblYShift)
                        .addGap(18, 18, 18)
                        .addComponent(txtYShift, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZShift)
                        .addGap(18, 18, 18)
                        .addComponent(txtZShift, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblXRotate)
                        .addGap(18, 18, 18)
                        .addComponent(txtXRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblYRotate)
                        .addGap(18, 18, 18)
                        .addComponent(txtYRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZRotate)
                        .addGap(18, 18, 18)
                        .addComponent(txtZRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblXZoom)
                        .addGap(18, 18, 18)
                        .addComponent(txtXZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblYZoom)
                        .addGap(18, 18, 18)
                        .addComponent(txtYZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblZZoom)
                        .addGap(18, 18, 18)
                        .addComponent(txtZZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblZoom)
                        .addGap(18, 18, 18)
                        .addComponent(txtChartZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZoom)
                    .addComponent(txtChartZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblXZoom)
                    .addComponent(txtXZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYZoom)
                    .addComponent(txtYZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZZoom)
                    .addComponent(txtZZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblXShift)
                    .addComponent(txtXShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZShift)
                    .addComponent(txtYShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYShift))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblXRotate)
                    .addComponent(txtXRotate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtZRotate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZRotate)
                    .addComponent(txtYRotate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYRotate))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxNotShowAxis)
                    .addComponent(chkBoxNotShowTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Double validateNumericTextInput(JTextField txtInput, Double dDefault, Double dMin, Double dMax) {
        String strText = txtInput.getText();
        double dValue = dDefault;
        Boolean bInputRight = true;
        try {
            dValue = Double.parseDouble(strText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_input_invalid_number(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            bInputRight = false;
        }
        if (dMin != null && dValue < dMin) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_input_number_invalid_range() + "<" + dMin + ".",
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            bInputRight = false;
        } else if (dMax != null && dValue > dMax) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_input_number_invalid_range() + ">" + dMax + ".",
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            bInputRight = false;
        }
        if (!bInputRight) {
            txtInput.setBackground(ERROR_BKGRND_COLOR);
        } else {
            txtInput.setBackground(NORMAL_BKGRND_COLOR);
        }
        if (bInputRight) {
            return dValue;
        } else {
            return null;
        }
    }

    private void setChartZoomingRatio() {
        if (mdXScale == mdYScale && mdYScale == mdZScale
                && mdXScale >= Math.pow(10.0, ZOOMING_MIN)
                && mdXScale <= Math.pow(10.0, ZOOMING_MAX)) {
            txtChartZoom.setEnabled(true);
            txtChartZoom.setText("" + mdXScale);
        } else {
            txtChartZoom.setEnabled(false);
        }
    }

    private void txtXZoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXZoomFocusLost
        Double dInput = validateNumericTextInput(txtXZoom, XSCALE_INITIAL_VALUE, Math.pow(10.0, ZOOMING_MIN), Math.pow(10.0, ZOOMING_MAX));
        if (dInput != null) {
            mdXScale = dInput;
            setChartZoomingRatio();
        }
    }//GEN-LAST:event_txtXZoomFocusLost

    private void txtYZoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYZoomFocusLost
        Double dInput = validateNumericTextInput(txtYZoom, YSCALE_INITIAL_VALUE, Math.pow(10.0, ZOOMING_MIN), Math.pow(10.0, ZOOMING_MAX));
        if (dInput != null) {
            mdYScale = dInput;
            setChartZoomingRatio();
        }
    }//GEN-LAST:event_txtYZoomFocusLost

    private void txtZZoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZZoomFocusLost
        Double dInput = validateNumericTextInput(txtZZoom, ZSCALE_INITIAL_VALUE, Math.pow(10.0, ZOOMING_MIN), Math.pow(10.0, ZOOMING_MAX));
        if (dInput != null) {
            mdZScale = dInput;
            setChartZoomingRatio();
        }
    }//GEN-LAST:event_txtZZoomFocusLost

    private void txtXShiftFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXShiftFocusLost
        Double dInput = validateNumericTextInput(txtXShift, XSHIFT_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdXShift = dInput;
        }
    }//GEN-LAST:event_txtXShiftFocusLost

    private void txtYShiftFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYShiftFocusLost
        Double dInput = validateNumericTextInput(txtYShift, YSHIFT_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdYShift = dInput;
        }
    }//GEN-LAST:event_txtYShiftFocusLost

    private void txtZShiftFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZShiftFocusLost
        Double dInput = validateNumericTextInput(txtZShift, ZSHIFT_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdZShift = dInput;
        }
    }//GEN-LAST:event_txtZShiftFocusLost

    private void txtXRotateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtXRotateFocusLost
        Double dInput = validateNumericTextInput(txtXRotate, XROTATE_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdXRotate = dInput;
        }
    }//GEN-LAST:event_txtXRotateFocusLost

    private void txtYRotateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYRotateFocusLost
        Double dInput = validateNumericTextInput(txtYRotate, YROTATE_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdYRotate = dInput;
        }
    }//GEN-LAST:event_txtYRotateFocusLost

    private void txtZRotateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZRotateFocusLost
        Double dInput = validateNumericTextInput(txtZRotate, ZROTATE_INITIAL_VALUE, null, null);
        if (dInput != null) {
            mdZRotate = dInput;
        }
    }//GEN-LAST:event_txtZRotateFocusLost

    private void txtChartZoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChartZoomFocusLost
        Double dInput = validateNumericTextInput(txtChartZoom, CHARTSCALE_INITIAL_VALUE, Math.pow(10.0, ZOOMING_MIN), Math.pow(10.0, ZOOMING_MAX));
        if (dInput != null) {
            mdXScale = mdYScale = mdZScale = dInput;
            txtXZoom.setText("" + mdXScale);
            txtXZoom.setBackground(NORMAL_BKGRND_COLOR);
            txtYZoom.setText("" + mdYScale);
            txtYZoom.setBackground(NORMAL_BKGRND_COLOR);
            txtZZoom.setText("" + mdZScale);
            txtZZoom.setBackground(NORMAL_BKGRND_COLOR);
        }
    }//GEN-LAST:event_txtChartZoomFocusLost

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // should be mdLastXScale /mdXScale because mdLastXScale = LastTo/LastFrom, mdXScale = ThisTo/ThisFrom, and we want ThisFrom/LastFrom
        moglChart.applyCfgChart(getAdjParams());
        mdLastXScale = mdXScale;
        mdLastYScale = mdYScale;
        mdLastZScale = mdZScale;
        mdLastXShift = mdXShift;
        mdLastYShift = mdYShift;
        mdLastZShift = mdZShift;
        mdLastXRotate = mdXRotate;
        mdLastYRotate = mdYRotate;
        mdLastZRotate = mdZRotate;
    }//GEN-LAST:event_btnCloseActionPerformed

    private void chkBoxNotShowAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxNotShowAxisActionPerformed
        if (chkBoxNotShowAxis.isSelected()) {
            mbNotShowAxis = true;
        } else {
            mbNotShowAxis = false;
        }
    }//GEN-LAST:event_chkBoxNotShowAxisActionPerformed

    private void chkBoxNotShowTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxNotShowTitleActionPerformed
        if (chkBoxNotShowTitle.isSelected()) {
            mbNotShowTitle = true;
        } else {
            mbNotShowTitle = false;
        }
    }//GEN-LAST:event_chkBoxNotShowTitleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JMultiXYZChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JMultiXYZChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JMultiXYZChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JMultiXYZChartAdj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JMultiXYZChartAdj dialog = new JMultiXYZChartAdj(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JCheckBox chkBoxNotShowAxis;
    private javax.swing.JCheckBox chkBoxNotShowTitle;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblXRotate;
    private javax.swing.JLabel lblXShift;
    private javax.swing.JLabel lblXZoom;
    private javax.swing.JLabel lblYRotate;
    private javax.swing.JLabel lblYShift;
    private javax.swing.JLabel lblYZoom;
    private javax.swing.JLabel lblZRotate;
    private javax.swing.JLabel lblZShift;
    private javax.swing.JLabel lblZZoom;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JTextField txtChartZoom;
    private javax.swing.JTextField txtXRotate;
    private javax.swing.JTextField txtXShift;
    private javax.swing.JTextField txtXZoom;
    private javax.swing.JTextField txtYRotate;
    private javax.swing.JTextField txtYShift;
    private javax.swing.JTextField txtYZoom;
    private javax.swing.JTextField txtZRotate;
    private javax.swing.JTextField txtZShift;
    private javax.swing.JTextField txtZZoom;
    // End of variables declaration//GEN-END:variables
    public static class AdjOGLChartParams implements Serializable {

        public double mdXScale = 1;
        public double mdYScale = 1;
        public double mdZScale = 1;
        public double mdXShift = 0;
        public double mdYShift = 0;
        public double mdZShift = 0;
        public double mdXRotate = 0;
        public double mdYRotate = 0;
        public double mdZRotate = 0;
        public boolean mbShowAxisChange = false;
        public boolean mbShowTitleChange = false;

        public boolean isNoAdj() {
            return (mdXScale == 1) && (mdYScale == 1) && (mdZScale == 1)
                    && (mdXShift == 0) && (mdYShift == 0) && (mdZShift == 0)
                    && (mdXRotate == 0) && (mdYRotate == 0) && (mdZRotate == 0)
                    && (!mbShowAxisChange) && (!mbShowTitleChange);
        }
    }

    public static final Color NORMAL_BKGRND_COLOR = Color.white;
    public static final Color ERROR_BKGRND_COLOR = Color.yellow;

    public static final int ZOOMING_MAX = 2; // 10 ** 2
    public static final int ZOOMING_MIN = -2;    // 10 ** -2
    public static final double CHARTSCALE_INITIAL_VALUE = 1.0;
    public static final double XSCALE_INITIAL_VALUE = 1.0;
    public static final double YSCALE_INITIAL_VALUE = 1.0;
    public static final double ZSCALE_INITIAL_VALUE = 1.0;
    public static final double XSHIFT_INITIAL_VALUE = 0.0;
    public static final double YSHIFT_INITIAL_VALUE = 0.0;
    public static final double ZSHIFT_INITIAL_VALUE = 0.0;
    public static final double XROTATE_INITIAL_VALUE = 0.0;
    public static final double YROTATE_INITIAL_VALUE = 0.0;
    public static final double ZROTATE_INITIAL_VALUE = 0.0;
    public static final boolean NOTSHOWAXIS_INITIAL_VALUE = true;
    public static final boolean NOTSHOWTITLE_INITIAL_VALUE = false;

    private double mdXScale = XSCALE_INITIAL_VALUE;
    private double mdYScale = YSCALE_INITIAL_VALUE;
    private double mdZScale = ZSCALE_INITIAL_VALUE;
    private double mdXShift = XSHIFT_INITIAL_VALUE;
    private double mdYShift = YSHIFT_INITIAL_VALUE;
    private double mdZShift = ZSHIFT_INITIAL_VALUE;
    private double mdXRotate = XROTATE_INITIAL_VALUE;
    private double mdYRotate = YROTATE_INITIAL_VALUE;
    private double mdZRotate = ZROTATE_INITIAL_VALUE;
    private boolean mbNotShowAxis = NOTSHOWAXIS_INITIAL_VALUE;
    private boolean mbNotShowTitle = NOTSHOWTITLE_INITIAL_VALUE;

    private double mdLastXScale = mdXScale;
    private double mdLastYScale = mdYScale;
    private double mdLastZScale = mdZScale;
    private double mdLastXShift = mdXShift;
    private double mdLastYShift = mdYShift;
    private double mdLastZShift = mdZShift;
    private double mdLastXRotate = mdXRotate;
    private double mdLastYRotate = mdYRotate;
    private double mdLastZRotate = mdZRotate;

    public void resetParams() {
        mdXScale = XSCALE_INITIAL_VALUE;
        mdYScale = YSCALE_INITIAL_VALUE;
        mdZScale = ZSCALE_INITIAL_VALUE;
        mdXShift = XSHIFT_INITIAL_VALUE;
        mdYShift = YSHIFT_INITIAL_VALUE;
        mdZShift = ZSHIFT_INITIAL_VALUE;
        mdXRotate = XROTATE_INITIAL_VALUE;
        mdYRotate = YROTATE_INITIAL_VALUE;
        mdZRotate = ZROTATE_INITIAL_VALUE;
        mbNotShowAxis = moglChart.getNotDrawAxis();
        mbNotShowTitle = moglChart.getNotDrawTitle();

        mdLastXScale = mdXScale;
        mdLastYScale = mdYScale;
        mdLastZScale = mdZScale;
        mdLastXShift = mdXShift;
        mdLastYShift = mdYShift;
        mdLastZShift = mdZShift;
        mdLastXRotate = mdXRotate;
        mdLastYRotate = mdYRotate;
        mdLastZRotate = mdZRotate;

        txtXZoom.setText("" + mdXScale);
        txtYZoom.setText("" + mdYScale);
        txtZZoom.setText("" + mdZScale);
        txtXShift.setText("" + mdXShift);
        txtYShift.setText("" + mdYShift);
        txtZShift.setText("" + mdZShift);
        txtXRotate.setText("" + mdXRotate);
        txtYRotate.setText("" + mdYRotate);
        txtZRotate.setText("" + mdZRotate);
        setChartZoomingRatio();
        chkBoxNotShowAxis.setSelected(mbNotShowAxis);
        chkBoxNotShowTitle.setSelected(mbNotShowTitle);
    }

    public AdjOGLChartParams getAdjParams() {
        AdjOGLChartParams adjParams = new AdjOGLChartParams();
        adjParams.mdXScale = mdXScale / mdLastXScale;
        adjParams.mdYScale = mdYScale / mdLastYScale;
        adjParams.mdZScale = mdZScale / mdLastZScale;
        adjParams.mdXShift = mdXShift - mdLastXShift;
        adjParams.mdYShift = mdYShift - mdLastYShift;
        adjParams.mdZShift = mdZShift - mdLastZShift;
        adjParams.mdXRotate = mdXRotate - mdLastXRotate;
        adjParams.mdYRotate = mdYRotate - mdLastYRotate;
        adjParams.mdZRotate = mdZRotate - mdLastZRotate;
        adjParams.mbShowAxisChange = (mbNotShowAxis != moglChart.getNotDrawAxis());
        adjParams.mbShowTitleChange = (mbNotShowTitle != moglChart.getNotDrawTitle());
        return adjParams;
    }
}
