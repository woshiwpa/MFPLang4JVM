/*
 * MFP project, JApkGenInput.java : Designed and developed by Tony Cui in 2021
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * JApkGenInput.java
 *
 * Created on 29/06/2015, 3:17:44 PM
 */
package jcmdline;

import com.cyzapps.Jmfp.CompileAdditionalInfo;
import com.cyzapps.Jmfp.ErrorProcessor;
import com.cyzapps.Jmfp.ErrorProcessor.JMFPCompErrException;
import com.cyzapps.Jmfp.FunctionEntry;
import com.cyzapps.Multimedia.ImageLib.ImageManager;
import com.cyzapps.MultimediaAdapter.ImageMgrJava;
import com.cyzapps.OSAdapter.LangFileManager;
import com.cyzapps.adapter.MFPAdapter;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;

import javax.swing.text.DefaultStyledDocument;
import jcmdline.MFPAppConfig.MFPAppCfgParameter;
import org.apache.commons.compress.utils.Charsets;
import org.apache.commons.lang3.StringEscapeUtils;

/**
 *
 * @author tonyc
 */
public class JApkGenInput extends javax.swing.JDialog {

    /**
     * Creates new form JApkGenInput
     */
    public JApkGenInput(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        panelParams.setLayout(new BoxLayout(panelParams, BoxLayout.PAGE_AXIS));
        tabbedPanelAllInputs.setTitleAt(0, JCmdLineApp.getStringsClass().get_step_1());
        tabbedPanelAllInputs.setTitleAt(1, JCmdLineApp.getStringsClass().get_step_2());
        tabbedPanelAllInputs.setTitleAt(2, JCmdLineApp.getStringsClass().get_step_3());
        tabbedPanelAllInputs.setSelectedIndex(0);
        btnPrevious.setVisible(false);
        btnNext.setVisible(false);
        txtFieldFunctionName.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                txtFieldFunctionNameTextChanged(e);
            }

            public void removeUpdate(DocumentEvent e) {
                txtFieldFunctionNameTextChanged(e);
            }

            public void changedUpdate(DocumentEvent e) {
                txtFieldFunctionNameTextChanged(e);
            }
            // implement the methods
        });
        setUseOptionalParamEnabled(false);
        DefaultStyledDocument doc = new DefaultStyledDocument();
        doc.setDocumentFilter(new DocumentSizeFilter(ApkBuilder.MAX_FUNCTION_DESCRIPTION_LENGTH));
        txtAreaFunctionDescription.setDocument(doc);

        String strTestKey = JCmdLineApp.getStringsClass().get_test_key();
        String strNewKey = JCmdLineApp.getStringsClass().get_new_key();
        LinkedList<String> listKeys = ApkBuilder.findAllKeys(JCmdLineApp.mMFP4JavaFileMan);
        comboSelectKey.addItem(strTestKey);
        comboSelectKey.addItem(strNewKey);
        for (int idx = 0; idx < listKeys.size(); idx++) {
            comboSelectKey.addItem(listKeys.get(idx));
        }
    }

    public final void setUseOptionalParamEnabled(boolean bEnabled) {
        if (bEnabled) {
            chkBoxUseOptionalParam.setEnabled(true);
        } else {
            chkBoxUseOptionalParam.setEnabled(false);
            chkBoxUseOptionalParam.setSelected(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanelAllInputs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblAppName = new javax.swing.JLabel();
        txtFieldAppName = new javax.swing.JTextField();
        lblAppPkgId = new javax.swing.JLabel();
        txtFieldAppPkgId = new javax.swing.JTextField();
        lblAppVersion = new javax.swing.JLabel();
        txtFieldAppVersionStr = new javax.swing.JTextField();
        txtFieldAppVersionCode = new javax.swing.JTextField();
        lblAppIcon = new javax.swing.JLabel();
        btnAppIcon = new javax.swing.JButton();
        chkBoxUseDefaultAppDescription = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaAppDescription = new javax.swing.JTextArea();
        lblIconShown = new javax.swing.JLabel();
        lblAppWorkingFolder = new javax.swing.JLabel();
        txtFieldAppWorkingFolder = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelStep2 = new javax.swing.JPanel();
        lblFunctionName = new javax.swing.JLabel();
        txtFieldFunctionName = new javax.swing.JTextField();
        chkBoxUseOptionalParam = new javax.swing.JCheckBox();
        panelParams = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAreaFunctionDescription = new javax.swing.JTextArea();
        lblFunctionDescription = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAreaFunctionHelp = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelStep3 = new javax.swing.JPanel();
        lblApkFileName = new javax.swing.JLabel();
        txtFieldApkFileName = new javax.swing.JTextField();
        comboSelectKey = new javax.swing.JComboBox();
        lblSelectKey = new javax.swing.JLabel();
        lblKeyStoreName = new javax.swing.JLabel();
        txtFieldKeyStoreName = new javax.swing.JTextField();
        lblKeyStorePasswd = new javax.swing.JLabel();
        passwdFieldKeyStorePasswd = new javax.swing.JPasswordField();
        lblKeyStorePasswdAgain = new javax.swing.JLabel();
        passwdFieldKeyStorePasswdAgain = new javax.swing.JPasswordField();
        lblKeyName = new javax.swing.JLabel();
        txtFieldKeyName = new javax.swing.JTextField();
        lblKeyValidPeriod = new javax.swing.JLabel();
        txtFieldKeyValidPeriod = new javax.swing.JTextField();
        passwdFieldKeyPasswd = new javax.swing.JPasswordField();
        lblKeyPasswd = new javax.swing.JLabel();
        lblKeyPasswdAgain = new javax.swing.JLabel();
        passwdFieldKeyPasswdAgain = new javax.swing.JPasswordField();
        lblPersonalInfo = new javax.swing.JLabel();
        txtFieldYourName = new javax.swing.JTextField();
        lblYourName = new javax.swing.JLabel();
        txtFieldYourDepartment = new javax.swing.JTextField();
        lblYourDepartment = new javax.swing.JLabel();
        txtFieldYourCompany = new javax.swing.JTextField();
        lblYourCompany = new javax.swing.JLabel();
        txtFieldYourStreetNumber = new javax.swing.JTextField();
        lblYourStreetNumber = new javax.swing.JLabel();
        txtFieldYourCity = new javax.swing.JTextField();
        lblYourCity = new javax.swing.JLabel();
        txtFieldYourState = new javax.swing.JTextField();
        lblYourState = new javax.swing.JLabel();
        txtFieldYourStateCode = new javax.swing.JTextField();
        lblYourStateCode = new javax.swing.JLabel();
        txtFieldYourCountry = new javax.swing.JTextField();
        lblYourCountry = new javax.swing.JLabel();
        txtFieldYourEmail = new javax.swing.JTextField();
        lblYourEmail = new javax.swing.JLabel();
        lblYourWebSite = new javax.swing.JLabel();
        txtFieldYourWebSite = new javax.swing.JTextField();
        lblContactDetails = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        tabbedPanelAllInputs.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        tabbedPanelAllInputs.setName("tabbedPanelAllInputs"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        lblAppName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_application_name_prompt() + "</p></html>");
        lblAppName.setName("lblAppName"); // NOI18N

        txtFieldAppName.setName("txtFieldAppName"); // NOI18N

        lblAppPkgId.setText("<html><p>" + JCmdLineApp.getStringsClass().get_application_pkg_id_prompt() + "</p></html>");
        lblAppPkgId.setName("lblAppPkgId"); // NOI18N

        txtFieldAppPkgId.setName("txtFieldAppPkgId"); // NOI18N

        lblAppVersion.setText("<html><p>" + JCmdLineApp.getStringsClass().get_application_version_prompt() + "</p></html>");
        lblAppVersion.setName("lblAppVersion"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jcmdline.JCmdLineApp.class).getContext().getResourceMap(JApkGenInput.class);
        txtFieldAppVersionStr.setText(resourceMap.getString("txtFieldAppVersionStr.text")); // NOI18N
        txtFieldAppVersionStr.setToolTipText(resourceMap.getString("txtFieldAppVersionStr.toolTipText")); // NOI18N
        txtFieldAppVersionStr.setName("txtFieldAppVersionStr"); // NOI18N

        txtFieldAppVersionCode.setText(resourceMap.getString("txtFieldAppVersionCode.text")); // NOI18N
        txtFieldAppVersionCode.setToolTipText(resourceMap.getString("txtFieldAppVersionCode.toolTipText")); // NOI18N
        txtFieldAppVersionCode.setName("txtFieldAppVersionCode"); // NOI18N

        lblAppIcon.setText("<html><p>" + JCmdLineApp.getStringsClass().get_application_icon_selector_prompt() + "</p></html>");
        lblAppIcon.setName("lblAppIcon"); // NOI18N

        btnAppIcon.setText(JCmdLineApp.getStringsClass().get_select());
        btnAppIcon.setName("btnAppIcon"); // NOI18N
        btnAppIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAppIconActionPerformed(evt);
            }
        });

        chkBoxUseDefaultAppDescription.setText("<html><p>" + JCmdLineApp.getStringsClass().get_help_use_default_app_description_or_type() + "</p></html>");
        chkBoxUseDefaultAppDescription.setName("chkBoxUseDefaultAppDescription"); // NOI18N
        chkBoxUseDefaultAppDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxUseDefaultAppDescriptionActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        txtAreaAppDescription.setColumns(20);
        txtAreaAppDescription.setLineWrap(true);
        txtAreaAppDescription.setRows(5);
        txtAreaAppDescription.setName("txtAreaAppDescription"); // NOI18N
        jScrollPane2.setViewportView(txtAreaAppDescription);

        lblIconShown.setForeground(resourceMap.getColor("lblIconShown.foreground")); // NOI18N
        lblIconShown.setIcon(resourceMap.getIcon("lblIconShown.icon")); // NOI18N
        lblIconShown.setText(resourceMap.getString("lblIconShown.text")); // NOI18N
        lblIconShown.setName("lblIconShown"); // NOI18N

        lblAppWorkingFolder.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAppWorkingFolder.setText("<html><p>" + JCmdLineApp.getStringsClass().get_application_working_folder_prompt() + "</p></html>");
        lblAppWorkingFolder.setToolTipText(resourceMap.getString("lblAppWorkingFolder.toolTipText")); // NOI18N
        lblAppWorkingFolder.setName("lblAppWorkingFolder"); // NOI18N

        txtFieldAppWorkingFolder.setText(resourceMap.getString("txtFieldAppWorkingFolder.text")); // NOI18N
        txtFieldAppWorkingFolder.setToolTipText("<html><p>" + JCmdLineApp.getStringsClass().get_application_working_folder_hint() + "</p></html>");
        txtFieldAppWorkingFolder.setName("txtFieldAppWorkingFolder"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(lblAppIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(lblAppPkgId, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addComponent(lblAppVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkBoxUseDefaultAppDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAppName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtFieldAppVersionStr, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtFieldAppVersionCode, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtFieldAppName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblIconShown, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAppIcon))
                            .addComponent(lblAppWorkingFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFieldAppWorkingFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtFieldAppPkgId, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(209, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAppName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFieldAppName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAppPkgId, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFieldAppPkgId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAppVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldAppVersionCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldAppVersionStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAppIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAppIcon)
                    .addComponent(lblIconShown))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAppWorkingFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldAppWorkingFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkBoxUseDefaultAppDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
        );

        tabbedPanelAllInputs.addTab("tab1", jPanel1);

        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        panelStep2.setName("panelStep2"); // NOI18N

        lblFunctionName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFunctionName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_function_name_prompt() + "</p></html>");
        lblFunctionName.setName("lblFunctionName"); // NOI18N

        txtFieldFunctionName.setName("txtFieldFunctionName"); // NOI18N

        chkBoxUseOptionalParam.setText("<html><p>" + JCmdLineApp.getStringsClass().get_with_optional_params() + "</p></html>");
        chkBoxUseOptionalParam.setName("chkBoxUseOptionalParam"); // NOI18N

        panelParams.setName("panelParams"); // NOI18N

        javax.swing.GroupLayout panelParamsLayout = new javax.swing.GroupLayout(panelParams);
        panelParams.setLayout(panelParamsLayout);
        panelParamsLayout.setHorizontalGroup(
            panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 412, Short.MAX_VALUE)
        );
        panelParamsLayout.setVerticalGroup(
            panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );

        btnAdd.setText(JCmdLineApp.getStringsClass().get_add());
        btnAdd.setName("btnAdd"); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDeleteAll.setText(JCmdLineApp.getStringsClass().get_delete_all());
        btnDeleteAll.setName("btnDeleteAll"); // NOI18N
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        txtAreaFunctionDescription.setColumns(20);
        txtAreaFunctionDescription.setLineWrap(true);
        txtAreaFunctionDescription.setRows(5);
        txtAreaFunctionDescription.setName("txtAreaFunctionDescription"); // NOI18N
        jScrollPane4.setViewportView(txtAreaFunctionDescription);

        lblFunctionDescription.setText("<html><p>" + JCmdLineApp.getStringsClass().get_function_description_prompt() + "</p></html>");
        lblFunctionDescription.setName("lblFunctionDescription"); // NOI18N

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        txtAreaFunctionHelp.setBackground(resourceMap.getColor("txtAreaFunctionHelp.background")); // NOI18N
        txtAreaFunctionHelp.setColumns(20);
        txtAreaFunctionHelp.setEditable(false);
        txtAreaFunctionHelp.setLineWrap(true);
        txtAreaFunctionHelp.setRows(5);
        txtAreaFunctionHelp.setName("txtAreaFunctionHelp"); // NOI18N
        jScrollPane5.setViewportView(txtAreaFunctionHelp);

        javax.swing.GroupLayout panelStep2Layout = new javax.swing.GroupLayout(panelStep2);
        panelStep2.setLayout(panelStep2Layout);
        panelStep2Layout.setHorizontalGroup(
            panelStep2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStep2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStep2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelStep2Layout.createSequentialGroup()
                        .addComponent(lblFunctionName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFieldFunctionName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chkBoxUseOptionalParam, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelStep2Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteAll))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelParams, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFunctionDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(152, 152, 152))
        );
        panelStep2Layout.setVerticalGroup(
            panelStep2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStep2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStep2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFunctionName)
                    .addComponent(txtFieldFunctionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkBoxUseOptionalParam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFunctionDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDeleteAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(486, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(panelStep2);

        tabbedPanelAllInputs.addTab(resourceMap.getString("jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        jScrollPane3.setHorizontalScrollBar(null);
        jScrollPane3.setName("jScrollPane3"); // NOI18N

        panelStep3.setName("panelStep3"); // NOI18N

        lblApkFileName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblApkFileName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_apk_name() + "</p></html>");
        lblApkFileName.setName("lblApkFileName"); // NOI18N

        txtFieldApkFileName.setName("txtFieldApkFileName"); // NOI18N

        comboSelectKey.setName("comboSelectKey"); // NOI18N
        comboSelectKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelectKeyActionPerformed(evt);
            }
        });

        lblSelectKey.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSelectKey.setText("<html><p>" + JCmdLineApp.getStringsClass().get_select_apk_signiture_key() + "</p></html>");
        lblSelectKey.setName("lblSelectKey"); // NOI18N

        lblKeyStoreName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyStoreName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_keystore_name() + "</p></html>");
        lblKeyStoreName.setName("lblKeyStoreName"); // NOI18N

        txtFieldKeyStoreName.setName("txtFieldKeyStoreName"); // NOI18N

        lblKeyStorePasswd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyStorePasswd.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_keystore_password() + "</p></html>");
        lblKeyStorePasswd.setName("lblKeyStorePasswd"); // NOI18N

        passwdFieldKeyStorePasswd.setText(resourceMap.getString("passwdFieldKeyStorePasswd.text")); // NOI18N
        passwdFieldKeyStorePasswd.setName("passwdFieldKeyStorePasswd"); // NOI18N

        lblKeyStorePasswdAgain.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyStorePasswdAgain.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_password_again() + "</p></html>");
        lblKeyStorePasswdAgain.setName("lblKeyStorePasswdAgain"); // NOI18N

        passwdFieldKeyStorePasswdAgain.setText(resourceMap.getString("passwdFieldKeyStorePasswdAgain.text")); // NOI18N
        passwdFieldKeyStorePasswdAgain.setName("passwdFieldKeyStorePasswdAgain"); // NOI18N

        lblKeyName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_key_name() + "</p></html>");
        lblKeyName.setName("lblKeyName"); // NOI18N

        txtFieldKeyName.setName("txtFieldKeyName"); // NOI18N

        lblKeyValidPeriod.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyValidPeriod.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_key_valid_period() + "</p></html>");
        lblKeyValidPeriod.setName("lblKeyValidPeriod"); // NOI18N

        txtFieldKeyValidPeriod.setToolTipText(resourceMap.getString("txtFieldKeyValidPeriod.toolTipText")); // NOI18N
        txtFieldKeyValidPeriod.setName("txtFieldKeyValidPeriod"); // NOI18N

        passwdFieldKeyPasswd.setText(resourceMap.getString("passwdFieldKeyPasswd.text")); // NOI18N
        passwdFieldKeyPasswd.setName("passwdFieldKeyPasswd"); // NOI18N

        lblKeyPasswd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyPasswd.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_key_password() + "</p></html>");
        lblKeyPasswd.setName("lblKeyPasswd"); // NOI18N

        lblKeyPasswdAgain.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblKeyPasswdAgain.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_password_again() + "</p></html>");
        lblKeyPasswdAgain.setName("lblKeyPasswdAgain"); // NOI18N

        passwdFieldKeyPasswdAgain.setText(resourceMap.getString("passwdFieldKeyPasswdAgain.text")); // NOI18N
        passwdFieldKeyPasswdAgain.setName("passwdFieldKeyPasswdAgain"); // NOI18N

        lblPersonalInfo.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_personal_information() + "</p></html>");
        lblPersonalInfo.setName("lblPersonalInfo"); // NOI18N

        txtFieldYourName.setName("txtFieldYourName"); // NOI18N

        lblYourName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourName.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_name() + "</p></html>");
        lblYourName.setName("lblYourName"); // NOI18N

        txtFieldYourDepartment.setName("txtFieldYourDepartment"); // NOI18N

        lblYourDepartment.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourDepartment.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_department() + "</p></html>");
        lblYourDepartment.setName("lblYourDepartment"); // NOI18N

        txtFieldYourCompany.setName("txtFieldYourCompany"); // NOI18N

        lblYourCompany.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourCompany.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_company() + "</p></html>");
        lblYourCompany.setName("lblYourCompany"); // NOI18N

        txtFieldYourStreetNumber.setName("txtFieldYourStreetNumber"); // NOI18N

        lblYourStreetNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourStreetNumber.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_street_no() + "</p></html>");
        lblYourStreetNumber.setName("lblYourStreetNumber"); // NOI18N

        txtFieldYourCity.setName("txtFieldYourCity"); // NOI18N

        lblYourCity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourCity.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_city() + "</p></html>");
        lblYourCity.setName("lblYourCity"); // NOI18N

        txtFieldYourState.setName("txtFieldYourState"); // NOI18N

        lblYourState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourState.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_state() + "</p></html>");
        lblYourState.setName("lblYourState"); // NOI18N

        txtFieldYourStateCode.setName("txtFieldYourStateCode"); // NOI18N

        lblYourStateCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourStateCode.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_state_code() + "</p></html>");
        lblYourStateCode.setName("lblYourStateCode"); // NOI18N

        txtFieldYourCountry.setName("txtFieldYourCountry"); // NOI18N

        lblYourCountry.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourCountry.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_country() + "</p></html>");
        lblYourCountry.setName("lblYourCountry"); // NOI18N

        txtFieldYourEmail.setName("txtFieldYourEmail"); // NOI18N

        lblYourEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourEmail.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_email() + "</p></html>");
        lblYourEmail.setName("lblYourEmail"); // NOI18N

        lblYourWebSite.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYourWebSite.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_website() + "</p></html>");
        lblYourWebSite.setName("lblYourWebSite"); // NOI18N

        txtFieldYourWebSite.setName("txtFieldYourWebSite"); // NOI18N

        lblContactDetails.setText("<html><p>" + JCmdLineApp.getStringsClass().get_please_input_your_contact_details() + "</p></html>");
        lblContactDetails.setName("lblContactDetails"); // NOI18N

        javax.swing.GroupLayout panelStep3Layout = new javax.swing.GroupLayout(panelStep3);
        panelStep3.setLayout(panelStep3Layout);
        panelStep3Layout.setHorizontalGroup(
            panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStep3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStep3Layout.createSequentialGroup()
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblApkFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyStoreName, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyValidPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyName, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyStorePasswdAgain, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyStorePasswd, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyPasswdAgain, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblKeyPasswd, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(lblSelectKey, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwdFieldKeyPasswdAgain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(passwdFieldKeyPasswd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtFieldKeyValidPeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtFieldKeyName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(passwdFieldKeyStorePasswdAgain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(comboSelectKey, 0, 263, Short.MAX_VALUE)
                            .addComponent(txtFieldKeyStoreName, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(passwdFieldKeyStorePasswd, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(txtFieldApkFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStep3Layout.createSequentialGroup()
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblYourStreetNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourCity, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourState, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourCompany, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourCountry, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourStateCode, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(lblYourName, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFieldYourCountry, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourStateCode)
                            .addComponent(txtFieldYourState, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourCity, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourStreetNumber, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourCompany, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourDepartment, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFieldYourName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                    .addComponent(lblPersonalInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addGroup(panelStep3Layout.createSequentialGroup()
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblYourWebSite, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblYourEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFieldYourWebSite, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                            .addComponent(txtFieldYourEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)))
                    .addComponent(lblContactDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelStep3Layout.setVerticalGroup(
            panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStep3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApkFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldApkFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSelectKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectKey))
                .addGap(18, 18, 18)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyStoreName, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldKeyStoreName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyStorePasswd)
                    .addComponent(passwdFieldKeyStorePasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyStorePasswdAgain)
                    .addComponent(passwdFieldKeyStorePasswdAgain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyName)
                    .addComponent(txtFieldKeyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyValidPeriod)
                    .addComponent(txtFieldKeyValidPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyPasswd)
                    .addComponent(passwdFieldKeyPasswd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKeyPasswdAgain)
                    .addComponent(passwdFieldKeyPasswdAgain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPersonalInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourName)
                    .addComponent(txtFieldYourName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourDepartment)
                    .addComponent(txtFieldYourDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourCompany)
                    .addComponent(txtFieldYourCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourStreetNumber)
                    .addComponent(txtFieldYourStreetNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourCity)
                    .addComponent(txtFieldYourCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourState)
                    .addComponent(txtFieldYourState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourStateCode)
                    .addComponent(txtFieldYourStateCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourCountry)
                    .addComponent(txtFieldYourCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(lblContactDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourEmail)
                    .addComponent(txtFieldYourEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelStep3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblYourWebSite)
                    .addComponent(txtFieldYourWebSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(160, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(panelStep3);

        tabbedPanelAllInputs.addTab(resourceMap.getString("jScrollPane3.TabConstraints.tabTitle"), jScrollPane3); // NOI18N

        btnPrevious.setText(JCmdLineApp.getStringsClass().get_back());
        btnPrevious.setName("btnPrevious"); // NOI18N

        btnNext.setText(JCmdLineApp.getStringsClass().get_go_to_next());
        btnNext.setName("btnNext"); // NOI18N

        btnOK.setText(JCmdLineApp.getStringsClass().get_ok());
        btnOK.setName("btnOK"); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPrevious)
                .addGap(18, 18, 18)
                .addComponent(btnNext)
                .addGap(115, 115, 115)
                .addComponent(btnOK, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(tabbedPanelAllInputs, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPanelAllInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnPrevious)
                    .addComponent(btnNext))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFieldFunctionNameTextChanged(DocumentEvent e) {
        String strShrinkedFuncName = FunctionEntry.getShrinkedName(txtFieldFunctionName.getText().toLowerCase(Locale.US));
        String strFuncHelp = MFPAdapter.getFunctionHelp(strShrinkedFuncName, JCmdLineApp.getLocalLanguage(), MFPAdapter.getAllCitingSpaces(null));
        if (strFuncHelp.equals("")) {
            strFuncHelp = JCmdLineApp.getStringsClass().get_no_quick_help_info() + " " + txtFieldFunctionName.getText();
        }
        txtAreaFunctionHelp.setText(strFuncHelp);
    }

    private void btnAppIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAppIconActionPerformed
        JFileChooser fc = new JFileChooser();
        FileFilter ff = new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                if (pathname.isDirectory()) {
                    return true;
                } else if (pathname.getAbsolutePath().length() > "png".length()
                        && pathname.getAbsolutePath().substring(pathname.getAbsolutePath().length() - "png".length())
                                .equalsIgnoreCase("png")) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public String getDescription() {
                return "png";
            }

        };
        fc.setFileFilter(ff);
        fc.setMultiSelectionEnabled(false);
        // Show open dialog; this method does not return until the dialog is closed
        fc.showOpenDialog(null);
        File fSelected = fc.getSelectedFile();
        if (fSelected != null) {
            String strFilePath = fSelected.getAbsolutePath();
            if (strFilePath.length() > "png".length()
                    && strFilePath.substring(strFilePath.length() - "png".length()).equalsIgnoreCase("png")) {

                try {
                    BufferedImage imagePng = ImageIO.read(new File(strFilePath));
                    if (imagePng.getWidth() != imagePng.getHeight() || imagePng.getWidth() < ApkBuilder.MIN_ICON_SIZE) {
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_selected_icon_invalid(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                    } else {
                        BufferedImage imageNewPng = new BufferedImage(SHOWN_ICON_SIZE, SHOWN_ICON_SIZE, BufferedImage.TYPE_INT_ARGB);
                        Graphics g = imageNewPng.createGraphics();
                        g.drawImage(imagePng, 0, 0, SHOWN_ICON_SIZE, SHOWN_ICON_SIZE, 0, 0, imagePng.getWidth(), imagePng.getHeight(), null);
                        g.dispose();
                        ImageIcon imageIcon = new ImageIcon(imageNewPng);
                        lblIconShown.setIcon(imageIcon);
                        lblIconShown.repaint();
                        mstrSelectedIconFile = strFilePath;
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_selected_icon_invalid(),
                            JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(JApkGenInput.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_wrong_file_type(),
                        JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnAppIconActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if (!validateStep1()) {
            return;
        } else if (!validateStep2()) {
            return;
        } else {
            validateStep3AndCreate();
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void chkBoxUseDefaultAppDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxUseDefaultAppDescriptionActionPerformed
        if (chkBoxUseDefaultAppDescription.isSelected()) {
            txtAreaAppDescription.setEnabled(false);
        } else {
            txtAreaAppDescription.setEnabled(true);
        }
    }//GEN-LAST:event_chkBoxUseDefaultAppDescriptionActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        panelParams.add(new JFuncParamCfg(this));
        panelParams.revalidate();

        if (!chkBoxUseOptionalParam.isEnabled()) {
            setUseOptionalParamEnabled(true);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        panelParams.removeAll();
        panelParams.revalidate();

        setUseOptionalParamEnabled(false);
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void comboSelectKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelectKeyActionPerformed
        int position = comboSelectKey.getSelectedIndex();
        if (position == 1) {    // ok, this is a new key.
            txtFieldKeyName.setEnabled(true);
            passwdFieldKeyPasswd.setEnabled(true);
            passwdFieldKeyPasswdAgain.setEnabled(true);
            txtFieldKeyStoreName.setEnabled(true);
            passwdFieldKeyStorePasswd.setEnabled(true);
            passwdFieldKeyStorePasswdAgain.setEnabled(true);
            txtFieldKeyValidPeriod.setEnabled(true);
            txtFieldYourCity.setEnabled(true);
            txtFieldYourCompany.setEnabled(true);
            txtFieldYourCountry.setEnabled(true);
            txtFieldYourDepartment.setEnabled(true);
            txtFieldYourEmail.setEnabled(true);
            txtFieldYourName.setEnabled(true);
            txtFieldYourState.setEnabled(true);
            txtFieldYourStateCode.setEnabled(true);
            txtFieldYourStreetNumber.setEnabled(true);
            txtFieldYourWebSite.setEnabled(true);
        } else {    // this is an existing key.
            txtFieldKeyName.setEnabled(false);
            passwdFieldKeyPasswd.setEnabled((position == 0) ? false : true);
            passwdFieldKeyPasswdAgain.setEnabled(false);
            txtFieldKeyStoreName.setEnabled(false);
            passwdFieldKeyStorePasswd.setEnabled((position == 0) ? false : true);
            passwdFieldKeyStorePasswdAgain.setEnabled(false);
            txtFieldKeyValidPeriod.setEnabled(false);
            txtFieldYourCity.setEnabled(false);
            txtFieldYourCompany.setEnabled(false);
            txtFieldYourCountry.setEnabled(false);
            txtFieldYourDepartment.setEnabled(false);
            txtFieldYourEmail.setEnabled(true);
            txtFieldYourName.setEnabled(false);
            txtFieldYourState.setEnabled(false);
            txtFieldYourStateCode.setEnabled(false);
            txtFieldYourStreetNumber.setEnabled(false);
            txtFieldYourWebSite.setEnabled(true);
        }
    }//GEN-LAST:event_comboSelectKeyActionPerformed

    private void validateStep3AndCreate() {
        String strApkName = txtFieldApkFileName.getText().trim();
        if (strApkName.length() == 0) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_apk_file(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(2);
            txtFieldApkFileName.requestFocus();
            return;
        }
        if (strApkName.length() <= 4 || !strApkName.substring(strApkName.length() - 4).equalsIgnoreCase(".apk")) {
            strApkName += ".apk"; // add apk extenstion
        }
        strApkName = strApkName.toLowerCase(Locale.US); // convert to lower case here is fine because
        txtFieldApkFileName.setText(strApkName); // set apk name coz it will be used by another thread later on.
        String strApkFolder = ApkBuilder.getApkFolderFullPath(JCmdLineApp.mMFP4JavaFileMan);
        File apkFolder = new File(strApkFolder);

        if (!apkFolder.exists()) {
            if (!apkFolder.mkdirs()) {
                JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_apk_file(),
                        JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                tabbedPanelAllInputs.setSelectedIndex(2);
                txtFieldApkFileName.requestFocus();
                return;
            }
        } else if (!apkFolder.isDirectory()) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_apk_file(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(2);
            txtFieldApkFileName.requestFocus();
            return;
        }

        String strApkPathName = strApkFolder + LangFileManager.STRING_PATH_DIVISOR + strApkName;
        File apkFile = new File(strApkPathName);
        if (apkFile.exists() && !apkFile.isFile()) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_apk_file(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(2);
            txtFieldApkFileName.requestFocus();
            return;
        } else if (apkFile.exists()) {
            // do you want to replace?
            if (JOptionPane.showConfirmDialog(null, JCmdLineApp.getStringsClass().get_do_you_want_to_replace_same_name_file(),
                    JCmdLineApp.getStringsClass().get_warning(), JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION) {
                // cancel
                tabbedPanelAllInputs.setSelectedIndex(2);
                txtFieldApkFileName.requestFocus();
                return;
            }
        }

        createAndSignApkSync();
    }

    private boolean validateStep2() {
        MFPAppConfig mfpAppConfig = new MFPAppConfig();
        mfpAppConfig.mstrApplicationName = txtFieldAppName.getText();
        mfpAppConfig.mstrApplicationPkgName = txtFieldAppPkgId.getText();
        mfpAppConfig.mstrApplicationWorkingFolder = txtFieldAppWorkingFolder.getText().trim();
        if (mfpAppConfig.mstrApplicationWorkingFolder.length() == 0) {
            // if user doesn't input, it is defaulted to the last part of package id.
            String[] strarrayPkgIdParts = mfpAppConfig.mstrApplicationPkgName.split("\\.");
            mfpAppConfig.mstrApplicationWorkingFolder = strarrayPkgIdParts[strarrayPkgIdParts.length - 1].trim();
        }
        mfpAppConfig.mstrApplicationVerStr = txtFieldAppVersionStr.getText();
        if (mfpAppConfig.mstrApplicationVerStr.length() == 0) {
            // hasn't input anything. So use hint value.
            mfpAppConfig.mstrApplicationVerStr = txtFieldAppVersionStr.getToolTipText();
        }
        String strAppVerCode = txtFieldAppVersionCode.getText();
        if (strAppVerCode.length() == 0) {
            // hasn't input anything. So use hint value.
            strAppVerCode = txtFieldAppVersionCode.getToolTipText();
        }
        try {
            mfpAppConfig.mnApplicationVerCode = Integer.parseInt(strAppVerCode);
        } catch(NumberFormatException e) {
            mfpAppConfig.mnApplicationVerCode = 0;
        }

        mfpAppConfig.mstrHelpInfo = txtAreaAppDescription.getText();
        if (chkBoxUseDefaultAppDescription.isSelected()) {
            mfpAppConfig.mstrHelpInfo = txtAreaFunctionHelp.getText();
        }
        mfpAppConfig.mfunctionInfo.mstrName = txtFieldFunctionName.getText();
        if (mfpAppConfig.mfunctionInfo.mstrName.trim().length() == 0
                || txtAreaFunctionHelp.getText().equals(JCmdLineApp.getStringsClass().get_no_quick_help_info() + " " + mfpAppConfig.mfunctionInfo.mstrName)) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_function_name_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(1);
            txtFieldFunctionName.requestFocus();
            return false;
        }
        mfpAppConfig.mfunctionInfo.mstrDescription = txtAreaFunctionDescription.getText();
        mfpAppConfig.mfunctionInfo.mbIncludesOptionalParam = chkBoxUseOptionalParam.isSelected();
        for (int i = 0; i < panelParams.getComponentCount(); i++) {
            if (panelParams.getComponent(i) instanceof JFuncParamCfg) {
                JFuncParamCfg paramCfgViewHolder = (JFuncParamCfg) panelParams.getComponent(i);
                MFPAppCfgParameter mfpAppCfgParameter = new MFPAppCfgParameter();
                mfpAppCfgParameter.mbIsString = paramCfgViewHolder.isString();
                mfpAppCfgParameter.mbNeedsInput = !paramCfgViewHolder.needsNoInput();
                mfpAppCfgParameter.mstrDefaultValue = paramCfgViewHolder.getDefaultValue();
                mfpAppCfgParameter.mstrPrompt = paramCfgViewHolder.getParamPrompt();
                mfpAppConfig.mfunctionInfo.mlistParams.add(mfpAppCfgParameter);
            }
        }

        // ok, mfpAppConfig done!
        mstrMFPAppCfgXML = mfpAppConfig.convertToXMLString();
        return true;
    }

    private boolean validateStep1() {
        String strAppName = txtFieldAppName.getText();
        byte[] arrayBytes = strAppName.getBytes(Charsets.UTF_8);
        if (arrayBytes.length > ApkBuilder.LONGEST_APP_NAME_IN_BYTES) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_app_name_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(0);
            txtFieldAppName.requestFocus();
            return false;
        }

        String strAppPkgId = txtFieldAppPkgId.getText();
        boolean bAppPkgIdValid = true;
        if (strAppPkgId.length() != ApkBuilder.PKG_ID_ORIGINAL_BYTE_LEN / 2) {
            bAppPkgIdValid = false;
        } else if (strAppPkgId.length() != strAppPkgId.getBytes(Charsets.UTF_8).length) {    // this implies that there are non-letter non-dot char
            bAppPkgIdValid = false;
        } else {
            int nLastDotIdx = -1;
            for (int idx = 0; idx < strAppPkgId.length(); idx++) {
                if (strAppPkgId.charAt(idx) != '.'
                        && !((strAppPkgId.charAt(idx) >= 'A' && strAppPkgId.charAt(idx) <= 'Z')
                        || (strAppPkgId.charAt(idx) >= 'a' && strAppPkgId.charAt(idx) <= 'z'))
                        && !(strAppPkgId.charAt(idx) >= '0' && strAppPkgId.charAt(idx) <= '9')) {
                    bAppPkgIdValid = false;    // invalid character
                    break;
                } else if (idx > 0 && strAppPkgId.charAt(idx) == '.' && strAppPkgId.charAt(idx - 1) == '.') {
                    bAppPkgIdValid = false;    // two dots put together
                    break;
                } else if ((idx == 0 || idx == strAppPkgId.length() - 1) && strAppPkgId.charAt(idx) == '.') {
                    bAppPkgIdValid = false;    // dot cannot be the front or end.
                    break;
                } else if (strAppPkgId.charAt(idx) == '.') {
                    nLastDotIdx = idx;
                } else if (strAppPkgId.charAt(idx) >= '0' && strAppPkgId.charAt(idx) <= '9' && idx == nLastDotIdx + 1) {
                    bAppPkgIdValid = false;    // number cannot be immediately after dot or in the beginning.
                    break;
                } else if (idx - nLastDotIdx > 10) {
                    bAppPkgIdValid = false;    // should be less than 10 letters between two dots
                    break;
                }
            }
        }
        if (!bAppPkgIdValid) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_app_pkg_id_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(0);
            txtFieldAppPkgId.requestFocus();
            return false;
        }

        String strAppVerStr = txtFieldAppVersionStr.getText();
        if (strAppVerStr.length() == 0) {
            // hasn't input anything. So use hint value.
            strAppVerStr = txtFieldAppVersionStr.getToolTipText();
            txtFieldAppVersionStr.setText(strAppVerStr);
        }
        if (strAppVerStr.length() != ApkBuilder.VER_STR_ORIGINAL_BYTE_LEN / 2) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_app_ver_str_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(0);
            txtFieldAppVersionStr.requestFocus();
            return false;
        }

        String strAppVerCode = txtFieldAppVersionCode.getText();
        if (strAppVerCode.length() == 0) {
            // hasn't input anything. So use hint value.
            strAppVerCode = txtFieldAppVersionCode.getToolTipText();
            txtFieldAppVersionCode.setText(strAppVerCode);
        }
        boolean bAppVerCodeValid = true;
        int nAppVerCode = 0;
        try {
            nAppVerCode = Integer.parseInt(strAppVerCode);
            if (nAppVerCode < 0 || nAppVerCode > ApkBuilder.LARGEST_VER_CODE) {
                bAppVerCodeValid = false;
            }
        } catch (NumberFormatException e) {
            bAppVerCodeValid = false;
        }
        if (!bAppVerCodeValid) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_app_ver_code_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(0);
            txtFieldAppVersionCode.requestFocus();
            return false;
        }

        boolean bAppWorkingFolderValid = true;
        String strWorkingFolder = txtFieldAppWorkingFolder.getText().trim();
        if (strWorkingFolder.equals("..")) {
            bAppWorkingFolderValid = false;
        } else {
            for (int idx = 0; idx < strWorkingFolder.length(); idx++) {
                if (strWorkingFolder.charAt(idx) == ':' || strWorkingFolder.charAt(idx) == '\\'
                        || strWorkingFolder.charAt(idx) == '/' || strWorkingFolder.charAt(idx) == '?'
                        || strWorkingFolder.charAt(idx) == '*' || strWorkingFolder.charAt(idx) == '>'
                        || strWorkingFolder.charAt(idx) == '<' || strWorkingFolder.charAt(idx) == '='
                        || strWorkingFolder.charAt(idx) == '~' || strWorkingFolder.charAt(idx) == '`'
                        || strWorkingFolder.charAt(idx) == '!' || strWorkingFolder.charAt(idx) == '@'
                        || strWorkingFolder.charAt(idx) == '#' || strWorkingFolder.charAt(idx) == '$'
                        || strWorkingFolder.charAt(idx) == '%' || strWorkingFolder.charAt(idx) == '^'
                        || strWorkingFolder.charAt(idx) == '&') {
                    bAppWorkingFolderValid = false;
                }
            }
        }
        if (!bAppWorkingFolderValid) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_app_working_folder_invalid(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(0);
            txtFieldAppWorkingFolder.requestFocus();
            return false;
        }

        return true;
    }

    public int getFuncParamCfgCnt() {
        int nNumOfParams = 0;
        for (int i = 0; i < panelParams.getComponentCount(); i++) {
            if (panelParams.getComponent(i) instanceof JFuncParamCfg) {
                nNumOfParams++;
            }
        }
        return nNumOfParams;
    }

    public int signApk() {
        String strKeyFolder = ApkBuilder.getSignatureFolderFullPath(JCmdLineApp.mMFP4JavaFileMan);
        String strKeyStoreName = "", strKeyName = "";
        String strKeyStorePasswd = "", strKeyPasswd = "";
        int nPosition = comboSelectKey.getSelectedIndex();
        if (nPosition == 1) {
            // we need to create a new key.
            strKeyStoreName = txtFieldKeyStoreName.getText();
            String strKeyStoreFullName = strKeyFolder + LangFileManager.STRING_PATH_DIVISOR + strKeyStoreName;
            File keyStore = new File(strKeyStoreFullName);
            if (keyStore.exists()) {
                //showMsg(getString(R.string.error), getString(R.string.cannot_replace_existing_keystore_file), ACTION_STOP_KEYSTORE_NAME);
                return -1;
            } else if (strKeyStoreName.trim().length() == 0) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_keystore_file), ACTION_STOP_KEYSTORE_NAME);
                return -2;
            }
            strKeyStoreName = strKeyStoreFullName;

            strKeyStorePasswd = String.valueOf(passwdFieldKeyStorePasswd.getPassword());
            if (strKeyStorePasswd.length() < ApkBuilder.MIN_PASSWORD_LENGTH || !strKeyStorePasswd.trim().equals(strKeyStorePasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_keystore_password), ACTION_STOP_KEYSTORE_PASSWORD);
                return -3;
            }

            String strKeyStoreAgainPasswd = String.valueOf(passwdFieldKeyStorePasswdAgain.getPassword());
            if (!strKeyStorePasswd.equals(strKeyStoreAgainPasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_keystore_again_password), ACTION_STOP_KEYSTORE_AGAIN_PASSWORD);
                return -4;
            }

            strKeyName = txtFieldKeyName.getText();
            if (strKeyName.trim().length() == 0) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_name), ACTION_STOP_KEY_NAME);
                return -5;
            }

            String strKeyValidPeriod = txtFieldKeyValidPeriod.getText();
            if (strKeyValidPeriod.length() == 0) {
                strKeyValidPeriod = txtFieldKeyValidPeriod.getToolTipText();
            }
            int nKeyValidPeriod = 0;
            try {
                nKeyValidPeriod = Integer.parseInt(strKeyValidPeriod);
                if (nKeyValidPeriod < 30) {
                    //showMsg(getString(R.string.error), getString(R.string.invalid_key_valid_period), ACTION_STOP_KEY_VALID_PERIOD);
                    return -6;
                }
            } catch (NumberFormatException e) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_valid_period), ACTION_STOP_KEY_VALID_PERIOD);
                return -7;
            }

            strKeyPasswd = String.valueOf(passwdFieldKeyPasswd.getPassword());
            if (strKeyPasswd.length() < ApkBuilder.MIN_PASSWORD_LENGTH || !strKeyPasswd.trim().equals(strKeyPasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_password), ACTION_STOP_KEY_PASSWORD);
                return -8;
            }

            String strKeyAgainPasswd = String.valueOf(passwdFieldKeyPasswdAgain.getPassword());
            if (!strKeyPasswd.equals(strKeyAgainPasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_again_password), ACTION_STOP_KEY_AGAIN_PASSWORD);
                return -9;
            }

            String strName = txtFieldYourName.getText().trim();

            String strDepartment = txtFieldYourDepartment.getText().trim();

            String strCompany = txtFieldYourCompany.getText().trim();

            String strStreetNo = txtFieldYourStreetNumber.getText().trim();

            String strCity = txtFieldYourCity.getText().trim();

            String strState = txtFieldYourState.getText().trim();

            String strStateCode = txtFieldYourStateCode.getText().trim();

            String strCountry = txtFieldYourCountry.getText().trim();

            String strEmail = txtFieldYourEmail.getText().trim();

            String strWebSite = txtFieldYourWebSite.getText().trim();

            ApkBuilder.Params params = new ApkBuilder.Params();
            params.requestCode = ApkBuilder.REQUEST_CODE_CREATE_KEYSTORE;
            params.storePath = strKeyStoreFullName;
            params.storePass = strKeyStorePasswd;
            params.keyName = strKeyName;
            params.keyAlgorithm = "RSA";
            params.keyPass = strKeyPasswd;
            params.keySize = 2048;
            params.certValidityYears = nKeyValidPeriod;
            params.certSignatureAlgorithm = "SHA1withRSA";
            params.distinguishedNameValues.setCommonName(strName);
            params.distinguishedNameValues.setOrganization(strCompany);
            params.distinguishedNameValues.setOrganizationalUnit(strDepartment);
            params.distinguishedNameValues.setCountry(strCountry);
            params.distinguishedNameValues.setState(strState);
            params.distinguishedNameValues.setLocality(strCity);
            params.distinguishedNameValues.setStreet(strStreetNo);

            boolean bKeyCreated = ApkBuilder.createCertificate(params);
            if (!bKeyCreated) {
                //showMsg(getString(R.string.error), getString(R.string.cannot_create_key), ACTION_STOP);
                return -10;
            }
        } else if (nPosition != 0) {
            String strSelected = comboSelectKey.getSelectedItem().toString();
            int idxTmp = strSelected.indexOf(STRING_KEYSTORE_KEY_DIV);
            if (idxTmp <= 0) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_keystore_file), ACTION_STOP);
                return -11;
            }
            if (idxTmp + STRING_KEYSTORE_KEY_DIV.length() >= strSelected.length()) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_name), ACTION_STOP);
                return -12;
            }
            strKeyStoreName = strKeyFolder + LangFileManager.STRING_PATH_DIVISOR + strSelected.substring(0, idxTmp);
            strKeyName = strSelected.substring(idxTmp + STRING_KEYSTORE_KEY_DIV.length());

            strKeyStorePasswd = String.valueOf(passwdFieldKeyStorePasswd.getPassword());
            if (strKeyStorePasswd.length() < ApkBuilder.MIN_PASSWORD_LENGTH || !strKeyStorePasswd.trim().equals(strKeyStorePasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_keystore_password), ACTION_STOP_KEYSTORE_PASSWORD);
                return -13;
            }

            strKeyPasswd = String.valueOf(passwdFieldKeyPasswd.getPassword());
            if (strKeyPasswd.length() < ApkBuilder.MIN_PASSWORD_LENGTH || !strKeyPasswd.trim().equals(strKeyPasswd)) {
                //showMsg(getString(R.string.error), getString(R.string.invalid_key_password), ACTION_STOP_KEY_PASSWORD);
                return -14;
            }
        }

        String strZip2SignFullPath = ApkBuilder.getZIP2SignFullPath(JCmdLineApp.mMFP4JavaFileMan);
        String strApkName = txtFieldApkFileName.getText().toString().trim();    // apk name here has been processed and validated
        String strApkFile = ApkBuilder.getApkFolderFullPath(JCmdLineApp.mMFP4JavaFileMan) + LangFileManager.STRING_PATH_DIVISOR + strApkName;
        boolean bResult = ApkBuilder.signZip(strZip2SignFullPath, strApkFile, strKeyStoreName, strKeyName, strKeyPasswd);
        if (bResult) {
            //showMsg(getString(R.string.done), getString(R.string.apk_is_created) + strApkFile, ACTION_FINISH);
            return 0;
        } else {
            //showMsg(getString(R.string.error), getString(R.string.cannot_sign_apk), ACTION_STOP);
            return -100;
        }
    }

    public String getManualStr() {
        String strManual = "<html><head><title>" + txtFieldAppName.getText() + "</title><meta http-equiv=Content-Type content=\"text/html; charset=UTF-8\"></head>\n";
        strManual += "<body style=\"background-color:white;\"><h2 style=\"color:blue\">" + JCmdLineApp.getStringsClass().get_help() + "</h2>\n";
        strManual += "<div style=\"color:black;white-space:pre-wrap;\">" + JCmdLineApp.getStringsClass().get_brief_introduction() + "</div><p/>\n";
        if (chkBoxUseDefaultAppDescription.isSelected()) {
            strManual += "<div style=\"color:black;white-space:pre-wrap;\">" + txtAreaFunctionHelp.getText() + "</div>\n";
        } else {
            strManual += "<div style=\"color:black;white-space:pre-wrap;\">" + txtAreaAppDescription.getText() + "</div>\n";
        }
        strManual += "<p/><div style=\"color:black;white-space:pre-wrap;\">" + JCmdLineApp.getStringsClass().get_app_working_folder() + " :</div>\n";
        String strApplicationWorkingFolder = txtFieldAppWorkingFolder.getText().trim();
        if (strApplicationWorkingFolder.length() == 0) {
            // if user doesn't input, it is defaulted to the last part of package id.
            String[] strarrayPkgIdParts = txtFieldAppPkgId.getText().split("\\.");
            strApplicationWorkingFolder = strarrayPkgIdParts[strarrayPkgIdParts.length - 1].trim();
        }
        strManual += "<div style=\"color:black;white-space:pre-wrap;\">" + JCmdLineApp.getStringsClass().get_your_sd_card() + "/" + strApplicationWorkingFolder + "</div>\n";

        String strContactDetails = "";
        String strEmail = txtFieldYourEmail.getText().trim();
        strEmail = StringEscapeUtils.escapeHtml4(strEmail);
        if (strEmail.length() > 0) {
            strContactDetails += "<p style=\"color:black\">" + JCmdLineApp.getStringsClass().get_email_address() + " : <a href=\"mailto:" + strEmail + "\">" + strEmail + "</a></p>\n";
        }

        String strWebSite = txtFieldYourWebSite.getText().trim();
        strWebSite = StringEscapeUtils.escapeHtml4(strWebSite);
        if (strWebSite.length() > 0) {
            if (strWebSite.length() > 7
                    && (strWebSite.substring(0, 7).equalsIgnoreCase("https:/")
                    || strWebSite.substring(0, 7).equalsIgnoreCase("http://"))) {
                strContactDetails += "<p style=\"color:black\">" + JCmdLineApp.getStringsClass().get_web_site() + " : <a href=\"" + strWebSite + "\">" + strWebSite + "</a></p>\n";
            } else {
                strContactDetails += "<p style=\"color:black\">" + JCmdLineApp.getStringsClass().get_web_site() + " : <a href=\"http://" + strWebSite + "\">" + strWebSite + "</a></p>\n";
            }
        }

        if (strContactDetails.length() > 0) {
            strManual += "<p style=\"color:black\">" + JCmdLineApp.getStringsClass().get_developer_contact_details() + " : </p>\n" + strContactDetails;
        }

        strManual += "</body></html>";
        return strManual;
    }
    
    public void createAndSignApkSync() {
        // create tmp apk generation folder
        if (!ApkBuilder.createApkGenerationTmpFolder(JCmdLineApp.mMFP4JavaFileMan)) {
            JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_delete_and_recreate_apk_tmp_folder(),
                    JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
            tabbedPanelAllInputs.setSelectedIndex(2);
            txtFieldApkFileName.requestFocus();
            return;
        } else {
            LinkedList<String> listFilePaths = null;
            JMFPCompErrException exUndefinedFunc = null;
            CompileAdditionalInfo cai = new CompileAdditionalInfo();
            String strFuncName = txtFieldFunctionName.getText();
            boolean bOptionalParam = chkBoxUseOptionalParam.isSelected();
            int nNumOfParams = getFuncParamCfgCnt();
            try {
                listFilePaths = ApkBuilder.compileFunctions(cai, strFuncName, nNumOfParams, bOptionalParam);
            } catch (ErrorProcessor.JMFPCompErrException ex) {
                if (ex.m_se.m_enumErrorType == ErrorProcessor.ERRORTYPES.UNDEFINED_FUNCTION) {
                    exUndefinedFunc = ex;
                }
            }

            if (listFilePaths == null) {
                if (exUndefinedFunc == null) {
                    JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_compilation_terminated_unexpectedly(),
                            JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                    tabbedPanelAllInputs.setSelectedIndex(2);
                    txtFieldApkFileName.requestFocus();
                    return;
                } else {
                    if (exUndefinedFunc.m_se.m_strSrcFile != null && exUndefinedFunc.m_se.m_strSrcFile.length() > 0
                            && exUndefinedFunc.m_se.m_nStartLineNo > 0 && exUndefinedFunc.m_se.m_nStartLineNo > 0) {
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_undefined_function() + " : " + exUndefinedFunc.m_se.m_strUserDefMsg
                                + "\n" + exUndefinedFunc.m_se.m_strSrcFile
                                + "\n" + JCmdLineApp.getStringsClass().get_line() + ":" + exUndefinedFunc.m_se.m_nStartLineNo
                                + ((exUndefinedFunc.m_se.m_nStartLineNo == exUndefinedFunc.m_se.m_nEndLineNo) ? "" : ("-" + exUndefinedFunc.m_se.m_nEndLineNo)),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_undefined_function() + " : " + exUndefinedFunc.m_se.m_strUserDefMsg,
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                    }
                    tabbedPanelAllInputs.setSelectedIndex(1);
                    txtFieldFunctionName.requestFocus();
                    return;
                }
            }

            String strManual = getManualStr();
            int nAppVerCode = 0;
            try {
                nAppVerCode = Integer.parseInt(txtFieldAppVersionCode.getText());
            } catch (NumberFormatException e) {
                // should be always valid, so no need to check exception.
            }
            ImageManager imgMgr = new ImageMgrJava();
            if (!ApkBuilder.createApkZip2Sign(JCmdLineApp.mMFP4JavaFileMan, imgMgr, listFilePaths, cai, mstrMFPAppCfgXML, false,
                    strManual, mstrSelectedIconFile, txtFieldAppName.getText(), txtFieldAppPkgId.getText(),
                    txtFieldAppVersionStr.getText(), nAppVerCode)) {
                JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_apk_file(),
                        JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                tabbedPanelAllInputs.setSelectedIndex(2);
                txtFieldApkFileName.requestFocus();
                return;
            } else {
                int nResult = signApk();
                ApkBuilder.deleteApkGenerationTmpFolder(JCmdLineApp.mMFP4JavaFileMan);
                switch (nResult) {
                    case -1:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_replace_existing_keystore_file(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyStoreName.requestFocus();
                        break;
                    case -2:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_keystore_file(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyStoreName.requestFocus();
                        break;
                    case -3:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_keystore_password()
                                + "\n" + JCmdLineApp.getStringsClass().get_password_requirement(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyStorePasswd.requestFocus();
                        break;
                    case -4:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_keystore_again_password(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyStorePasswd.requestFocus();
                        break;
                    case -5:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_name(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyName.requestFocus();
                        break;
                    case -6:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_valid_period(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyValidPeriod.requestFocus();
                        break;
                    case -7:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_valid_period(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyValidPeriod.requestFocus();
                        break;
                    case -8:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_password()
                                + "\n" + JCmdLineApp.getStringsClass().get_password_requirement(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyPasswd.requestFocus();
                        break;
                    case -9:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_again_password(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyPasswd.requestFocus();
                        break;
                    case -10:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_create_key(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyName.requestFocus();
                        break;
                    case -11:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_keystore_file(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyStoreName.requestFocus();
                        break;
                    case -12:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_name(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldKeyName.requestFocus();
                        break;
                    case -13:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_keystore_password(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyStorePasswd.requestFocus();
                        break;
                    case -14:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_invalid_key_password(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        passwdFieldKeyPasswd.requestFocus();
                        break;
                    case -100:
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_cannot_sign_apk(),
                                JCmdLineApp.getStringsClass().get_error(), JOptionPane.ERROR_MESSAGE);
                        tabbedPanelAllInputs.setSelectedIndex(2);
                        txtFieldApkFileName.requestFocus();
                        break;
                    default:    // success
                        String strApkName = txtFieldApkFileName.getText().trim();    // apk name here has been processed and validated
                        String strApkFile = ApkBuilder.getApkFolderFullPath(JCmdLineApp.mMFP4JavaFileMan) + LangFileManager.STRING_PATH_DIVISOR + strApkName;
                        JOptionPane.showMessageDialog(null, JCmdLineApp.getStringsClass().get_apk_is_created() + strApkFile,
                                JCmdLineApp.getStringsClass().get_done(), JOptionPane.INFORMATION_MESSAGE);
                        dispose();  // close the dialog
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JApkGenInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JApkGenInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JApkGenInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JApkGenInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JApkGenInput dialog = new JApkGenInput(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private String mstrSelectedIconFile = "";   // if empty, we use the default icon.
    private String mstrMFPAppCfgXML = "";   // mfp config string.
    private static final int SHOWN_ICON_SIZE = 64;

    private static final String STRING_KEYSTORE_KEY_DIV = "/";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAppIcon;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JCheckBox chkBoxUseDefaultAppDescription;
    private javax.swing.JCheckBox chkBoxUseOptionalParam;
    private javax.swing.JComboBox comboSelectKey;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblApkFileName;
    private javax.swing.JLabel lblAppIcon;
    private javax.swing.JLabel lblAppName;
    private javax.swing.JLabel lblAppPkgId;
    private javax.swing.JLabel lblAppVersion;
    private javax.swing.JLabel lblAppWorkingFolder;
    private javax.swing.JLabel lblContactDetails;
    private javax.swing.JLabel lblFunctionDescription;
    private javax.swing.JLabel lblFunctionName;
    private javax.swing.JLabel lblIconShown;
    private javax.swing.JLabel lblKeyName;
    private javax.swing.JLabel lblKeyPasswd;
    private javax.swing.JLabel lblKeyPasswdAgain;
    private javax.swing.JLabel lblKeyStoreName;
    private javax.swing.JLabel lblKeyStorePasswd;
    private javax.swing.JLabel lblKeyStorePasswdAgain;
    private javax.swing.JLabel lblKeyValidPeriod;
    private javax.swing.JLabel lblPersonalInfo;
    private javax.swing.JLabel lblSelectKey;
    private javax.swing.JLabel lblYourCity;
    private javax.swing.JLabel lblYourCompany;
    private javax.swing.JLabel lblYourCountry;
    private javax.swing.JLabel lblYourDepartment;
    private javax.swing.JLabel lblYourEmail;
    private javax.swing.JLabel lblYourName;
    private javax.swing.JLabel lblYourState;
    private javax.swing.JLabel lblYourStateCode;
    private javax.swing.JLabel lblYourStreetNumber;
    private javax.swing.JLabel lblYourWebSite;
    private javax.swing.JPanel panelParams;
    private javax.swing.JPanel panelStep2;
    private javax.swing.JPanel panelStep3;
    private javax.swing.JPasswordField passwdFieldKeyPasswd;
    private javax.swing.JPasswordField passwdFieldKeyPasswdAgain;
    private javax.swing.JPasswordField passwdFieldKeyStorePasswd;
    private javax.swing.JPasswordField passwdFieldKeyStorePasswdAgain;
    private javax.swing.JTabbedPane tabbedPanelAllInputs;
    private javax.swing.JTextArea txtAreaAppDescription;
    private javax.swing.JTextArea txtAreaFunctionDescription;
    private javax.swing.JTextArea txtAreaFunctionHelp;
    private javax.swing.JTextField txtFieldApkFileName;
    private javax.swing.JTextField txtFieldAppName;
    private javax.swing.JTextField txtFieldAppPkgId;
    private javax.swing.JTextField txtFieldAppVersionCode;
    private javax.swing.JTextField txtFieldAppVersionStr;
    private javax.swing.JTextField txtFieldAppWorkingFolder;
    private javax.swing.JTextField txtFieldFunctionName;
    private javax.swing.JTextField txtFieldKeyName;
    private javax.swing.JTextField txtFieldKeyStoreName;
    private javax.swing.JTextField txtFieldKeyValidPeriod;
    private javax.swing.JTextField txtFieldYourCity;
    private javax.swing.JTextField txtFieldYourCompany;
    private javax.swing.JTextField txtFieldYourCountry;
    private javax.swing.JTextField txtFieldYourDepartment;
    private javax.swing.JTextField txtFieldYourEmail;
    private javax.swing.JTextField txtFieldYourName;
    private javax.swing.JTextField txtFieldYourState;
    private javax.swing.JTextField txtFieldYourStateCode;
    private javax.swing.JTextField txtFieldYourStreetNumber;
    private javax.swing.JTextField txtFieldYourWebSite;
    // End of variables declaration//GEN-END:variables
}
